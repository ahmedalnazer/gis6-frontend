(function () {
  'use strict';

  let buffer = {
    entries: [],
    active: [],
    paused: false
  };

  buffer.write = function({ ts, data }) {
    const date = new Date(ts);
    buffer.entries.push({ data, date, time: ts });
    buffer.entries = buffer.entries.slice(-7500);
    if(!buffer.paused) {
      buffer.active = [ ...buffer.entries ];
    }
    // console.log(buffer.entries.length)
  };
  buffer.play = () => buffer.paused = false;
  buffer.pause = () => buffer.paused = true;

  function smooth(ctx, points, color, width) {
    ctx.strokeStyle = color;
    ctx.lineWidth = width;
    // ctx.strokeRect(20, 20, 150, 100)

    ctx.beginPath();
    if (points == undefined || points.length == 0) {
      return true
    }
    if (points.length == 1) {
      ctx.moveTo(points[0].x, points[0].y);
      ctx.lineTo(points[0].x, points[0].y);
      return true
    }
    if (points.length == 2) {
      ctx.moveTo(points[0].x, points[0].y);
      ctx.lineTo(points[1].x, points[1].y);
      return true
    }
    ctx.moveTo(points[0].x, points[0].y);
    for (var i = 1; i < points.length - 2; i++) {
      // ctx.lineTo(points[i].x, points[i].y)
      var xc = (points[i].x + points[i + 1].x) / 2;
      var yc = (points[i].y + points[i + 1].y) / 2;
      // ctx.lineTo(points[i].x, points[i].y)
      ctx.quadraticCurveTo(points[i].x, points[i].y, xc, yc);
    }
    ctx.quadraticCurveTo(points[i].x, points[i].y, points[i + 1].x, points[i + 1].y);
    ctx.stroke();
  }

  const draw = (chartData, logStats) => {
    const { canvas, ctx, scale, paused, properties, maxLinePoints, maxZones } = chartData;
    
    const latest = buffer.active[buffer.active.length - 1];
    let xRange = scale && scale.x ? parseInt(scale.x) : 10;

    if(isNaN(xRange)) xRange = 10;

    const now = new Date().getTime() - 500;
    let xMax = paused ? latest ? latest.time : now : now;
    let xMin = xMax - xRange * 1000;
    let renderLimit = xMin - 1000;
    let dX = xMax - xMin;

    // let sample = buffer.active.filter(x => x.time > renderLimit)

    let sample = [];

    for (let i = buffer.active.length; i >= 0; i--) {
      const frame = buffer.active[i];
      // console.log(frame && frame.time, renderLimit)
      if (frame) {
        if (frame.time >= renderLimit) {
          sample.unshift(frame);
        } else {
          break
        }
      }
    }

    const xScale = canvas.width / (xMax - xMin);

    let numIntvls = 0;
    let totalIntvl = 0;

    // sample 50 frames to get average interval (mitigate effect of latency)
    for (let i = 0; i < 50; i++) {
      let a = sample[i];
      let b = sample[i + 1];
      if (a && b) {
        const intvl = b.time - a.time;
        numIntvls++;
        totalIntvl += intvl;
      }
    }

    // average samples above to determine interval between plot points (data rate)
    const intvl = totalIntvl / numIntvls;

    // determine which points should be filtered based on max points per line
    const minMSInterval = dX / maxLinePoints;

    let rendered = [];

    // filter data points to exclude ones in the excluded time intervals
    for(let i = 0; i < sample.length; i++) {
      if(!rendered.length || i == sample.length - 1) {
        rendered.push(sample[i]);
      } else {
        if ((sample[i].time - 1614799160000) %  minMSInterval < intvl) {
          rendered.push(sample[i]);
        }
      }
    }

    let lines = {};
    let max = {};
    let min = {};
    let autoScale = {};

    for (let prop of properties) {
      lines[prop] = [];
      max[prop] = 0;
      min[prop] = 99999999999999;
    }


    for(let i = 0; i < rendered.length; i++) {
      const frame = rendered[i];
      
      const x = parseInt((frame.time - xMin) * xScale);

      if(x <= canvas.width) {
        for (let p = 0; p < frame.data.length && p < maxZones; p++) {
          const point = frame.data[p];

          for(let prop of properties) {
            if (!lines[prop][p]) lines[prop][p] = [];
            let y = point[prop];
            lines[prop][p].push({ x, y });
            if(y > max[prop]) max[prop] = y;
            if(y < min[prop]) min[prop] = y;
          }
        }
      }
    }

    for(let prop of properties) {
      min[prop] = Math.max(min[prop], 1);
      const r = max[prop] - min[prop];
      if(max[prop] < min[prop] + 1) {
        max[prop] = min[prop] + 1;
      }
      const even = i => {
        min[prop] = -i + i * Math.ceil(min[prop] / i);
        max[prop] = i + i * Math.floor(max[prop] / i);
      };
      if(r <= 10) {
        max[prop] = 1 + Math.floor(max[prop]);
        min[prop] = -1 + Math.ceil(min[prop]);
      } else if(r <= 100) {
        even(10);
      } else if (r <= 1000) {
        even(100);
      } else if (r <= 10000) {
        even(1000);
      }
      
      autoScale[prop] = canvas.height / (max[prop] - min[prop]);
    }


    // simplified lines for rendering
    let renderedLines = {};

    // track all rendered values per property
    let yValues = {};


    // loop through points and determine which ones are critical to geometry
    for(let prop of properties) {
      renderedLines[prop] = [];
      yValues[prop] = {
        total: 0,
        totalPoints: 0
      };

      for(let i = 0; i < lines[prop].length; i++) {
        renderedLines[prop][i] = [];

        for (let p = 0; p < lines[prop][i].length; p++) {
          let point = lines[prop][i][p];
          yValues[prop].total += point.y;
          yValues[prop].totalPoints += 1;
          point.y = parseInt(canvas.height - (point.y - min[prop]) * autoScale[prop]);
          renderedLines[prop][i].push(point);
        }
      }
    }

    const colors = {
      actual_temp: "#dd3300",
      actual_current: "#0033aa",
      actual_percent: "#33aabb"
    };

    // clear canvas for new frame
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    let avg = {};

    let totalPoints = 0;
    for(let prop of properties) {
      avg[prop] = yValues[prop].total / yValues[prop].totalPoints;
      for(let i = 0; i < renderedLines[prop].length; i++) {
        const line = renderedLines[prop][i];
        totalPoints += line.length;
        smooth(ctx, line, colors[prop], 2);
      }
    }

    logStats({ totalPoints, max, min, avg });
  };

  console.log('chart worker intialized');

  const renderers = {
    'line': draw
  };

  let chartData = {
    canvas: null,
    ctx: null,
    type: '',
    properties: [],
    scale: {
      x: 10,
      y: 'auto'
    }
  };

  let port;


  let stats = {};
  const logStats = s => stats = s;


  let renderTimes = [];

  let last = 0;
  const draw$1 = () => {
    const t = new Date().getTime();
    if (chartData.ctx) {
      if (renderers[chartData.type]) {
        renderers[chartData.type](chartData, logStats);
        renderTimes.push(new Date().getTime() - last);
      }
    }
    last = t;
    requestAnimationFrame(draw$1);
  };
  requestAnimationFrame(draw$1);

  let lastBuffer;

  const collectStats = () => {

    const totalRender = renderTimes.reduce((t, total) => total + t, 0);
    const avgRender = totalRender / renderTimes.length;
    const framerate = Math.round(1000 / avgRender);
    renderTimes = [];

    postMessage({ ...stats, framerate });
  };

  setInterval(collectStats, 300);




  const initialize = async () => {
    port.onmessage = e => {
      // console.log(e)
      const { data } = e.data;
      const { mt } = data;
      if (mt == 6) {
        let { records } = data;
        const ts = e.data.ts.getTime();
        // records = records.slice(0, 1)
        records = records.concat(records).concat(records);
        // records = records.slice(0, maxZones)


        // test tweening
        if(lastBuffer) {
          for(let x of [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ]) {
          // for(let x of [ 1, 3, 5, 7, 9, 11 ]) {
          // for(let x of [ 6 ]) {
            let tween = [];
            for(let i = 0; i < records.length; i++) {
              const last = lastBuffer[i];
              const current = records[i];
              if(last && current) {
                let tweened = { ...current };
                for (let prop of chartData.properties) {
                  // console.log(prop)
                  const delta = (current[prop] - last[prop]) / 12;
                  tweened[prop] = last[prop] + delta * x;
                }
                tween.push(tweened);
              }
            }
            const offset = 500 / 12 * x;
            setTimeout(() => buffer.write({ ts: ts - 500 + offset, data: tween }), offset);
          }
          setTimeout(() => buffer.write({ ts, data: records }), 500);
        }
        lastBuffer = records;
      }
    };

    port.postMessage({
      command: 'connect',
      channels: [ 'tczone' ]
    });
  };


  onmessage = e => {
    if (e.data.wsPort) {
      port = e.data.wsPort;
      initialize();
    } else if (e.data == 'close') {
      port.postMessage({ command: 'close' });
    } else {
      chartData = { ...chartData, ...e.data };
      // console.log('updating data', chartData)
      if (chartData.paused) {
        buffer.pause();
      } else {
        buffer.play();
      }
      if (e.data.canvas) {
        chartData.ctx = chartData.canvas.getContext("2d");
      }
    }
  };

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnQtd29ya2VyLmpzIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZGF0YS9jaGFydGluZy9idWZmZXIuanMiLCIuLi8uLi9zcmMvZGF0YS9jaGFydGluZy9saW5lLXV0aWxzLmpzIiwiLi4vLi4vc3JjL2RhdGEvY2hhcnRpbmcvbGluZS1wbG90LmpzIiwiLi4vLi4vc3JjL2RhdGEvY2hhcnRpbmcvY2hhcnQtd29ya2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImxldCBidWZmZXIgPSB7XG4gIGVudHJpZXM6IFtdLFxuICBhY3RpdmU6IFtdLFxuICBwYXVzZWQ6IGZhbHNlXG59XG5cbmV4cG9ydCBkZWZhdWx0IGJ1ZmZlclxuXG5idWZmZXIud3JpdGUgPSBmdW5jdGlvbih7IHRzLCBkYXRhIH0pIHtcbiAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHRzKVxuICBidWZmZXIuZW50cmllcy5wdXNoKHsgZGF0YSwgZGF0ZSwgdGltZTogdHMgfSlcbiAgYnVmZmVyLmVudHJpZXMgPSBidWZmZXIuZW50cmllcy5zbGljZSgtNzUwMClcbiAgaWYoIWJ1ZmZlci5wYXVzZWQpIHtcbiAgICBidWZmZXIuYWN0aXZlID0gWyAuLi5idWZmZXIuZW50cmllcyBdXG4gIH1cbiAgLy8gY29uc29sZS5sb2coYnVmZmVyLmVudHJpZXMubGVuZ3RoKVxufVxuYnVmZmVyLnBsYXkgPSAoKSA9PiBidWZmZXIucGF1c2VkID0gZmFsc2VcbmJ1ZmZlci5wYXVzZSA9ICgpID0+IGJ1ZmZlci5wYXVzZWQgPSB0cnVlXG4iLCJcbmV4cG9ydCBmdW5jdGlvbiBzbW9vdGgoY3R4LCBwb2ludHMsIGNvbG9yLCB3aWR0aCkge1xuICBjdHguc3Ryb2tlU3R5bGUgPSBjb2xvclxuICBjdHgubGluZVdpZHRoID0gd2lkdGhcbiAgLy8gY3R4LnN0cm9rZVJlY3QoMjAsIDIwLCAxNTAsIDEwMClcblxuICBjdHguYmVnaW5QYXRoKClcbiAgaWYgKHBvaW50cyA9PSB1bmRlZmluZWQgfHwgcG9pbnRzLmxlbmd0aCA9PSAwKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICBpZiAocG9pbnRzLmxlbmd0aCA9PSAxKSB7XG4gICAgY3R4Lm1vdmVUbyhwb2ludHNbMF0ueCwgcG9pbnRzWzBdLnkpXG4gICAgY3R4LmxpbmVUbyhwb2ludHNbMF0ueCwgcG9pbnRzWzBdLnkpXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICBpZiAocG9pbnRzLmxlbmd0aCA9PSAyKSB7XG4gICAgY3R4Lm1vdmVUbyhwb2ludHNbMF0ueCwgcG9pbnRzWzBdLnkpXG4gICAgY3R4LmxpbmVUbyhwb2ludHNbMV0ueCwgcG9pbnRzWzFdLnkpXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICBjdHgubW92ZVRvKHBvaW50c1swXS54LCBwb2ludHNbMF0ueSlcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBwb2ludHMubGVuZ3RoIC0gMjsgaSsrKSB7XG4gICAgLy8gY3R4LmxpbmVUbyhwb2ludHNbaV0ueCwgcG9pbnRzW2ldLnkpXG4gICAgdmFyIHhjID0gKHBvaW50c1tpXS54ICsgcG9pbnRzW2kgKyAxXS54KSAvIDJcbiAgICB2YXIgeWMgPSAocG9pbnRzW2ldLnkgKyBwb2ludHNbaSArIDFdLnkpIC8gMlxuICAgIC8vIGN0eC5saW5lVG8ocG9pbnRzW2ldLngsIHBvaW50c1tpXS55KVxuICAgIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHBvaW50c1tpXS54LCBwb2ludHNbaV0ueSwgeGMsIHljKVxuICB9XG4gIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHBvaW50c1tpXS54LCBwb2ludHNbaV0ueSwgcG9pbnRzW2kgKyAxXS54LCBwb2ludHNbaSArIDFdLnkpXG4gIGN0eC5zdHJva2UoKVxufSIsImltcG9ydCBidWZmZXIgZnJvbSAnLi9idWZmZXInXG5pbXBvcnQgeyBzbW9vdGggfSBmcm9tICcuL2xpbmUtdXRpbHMnXG5cbmNvbnN0IGRyYXcgPSAoY2hhcnREYXRhLCBsb2dTdGF0cykgPT4ge1xuICBjb25zdCB7IGNhbnZhcywgY3R4LCBzY2FsZSwgcGF1c2VkLCBwcm9wZXJ0aWVzLCBtYXhMaW5lUG9pbnRzLCBtYXhab25lcyB9ID0gY2hhcnREYXRhXG4gIFxuICBjb25zdCBsYXRlc3QgPSBidWZmZXIuYWN0aXZlW2J1ZmZlci5hY3RpdmUubGVuZ3RoIC0gMV1cbiAgbGV0IHhSYW5nZSA9IHNjYWxlICYmIHNjYWxlLnggPyBwYXJzZUludChzY2FsZS54KSA6IDEwXG5cbiAgaWYoaXNOYU4oeFJhbmdlKSkgeFJhbmdlID0gMTBcblxuICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIDUwMFxuICBsZXQgeE1heCA9IHBhdXNlZCA/IGxhdGVzdCA/IGxhdGVzdC50aW1lIDogbm93IDogbm93XG4gIGxldCB4TWluID0geE1heCAtIHhSYW5nZSAqIDEwMDBcbiAgbGV0IHJlbmRlckxpbWl0ID0geE1pbiAtIDEwMDBcbiAgbGV0IGRYID0geE1heCAtIHhNaW5cblxuICAvLyBsZXQgc2FtcGxlID0gYnVmZmVyLmFjdGl2ZS5maWx0ZXIoeCA9PiB4LnRpbWUgPiByZW5kZXJMaW1pdClcblxuICBsZXQgc2FtcGxlID0gW11cblxuICBmb3IgKGxldCBpID0gYnVmZmVyLmFjdGl2ZS5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgY29uc3QgZnJhbWUgPSBidWZmZXIuYWN0aXZlW2ldXG4gICAgLy8gY29uc29sZS5sb2coZnJhbWUgJiYgZnJhbWUudGltZSwgcmVuZGVyTGltaXQpXG4gICAgaWYgKGZyYW1lKSB7XG4gICAgICBpZiAoZnJhbWUudGltZSA+PSByZW5kZXJMaW1pdCkge1xuICAgICAgICBzYW1wbGUudW5zaGlmdChmcmFtZSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY29uc3QgeFNjYWxlID0gY2FudmFzLndpZHRoIC8gKHhNYXggLSB4TWluKVxuXG4gIGxldCBudW1JbnR2bHMgPSAwXG4gIGxldCB0b3RhbEludHZsID0gMFxuXG4gIC8vIHNhbXBsZSA1MCBmcmFtZXMgdG8gZ2V0IGF2ZXJhZ2UgaW50ZXJ2YWwgKG1pdGlnYXRlIGVmZmVjdCBvZiBsYXRlbmN5KVxuICBmb3IgKGxldCBpID0gMDsgaSA8IDUwOyBpKyspIHtcbiAgICBsZXQgYSA9IHNhbXBsZVtpXVxuICAgIGxldCBiID0gc2FtcGxlW2kgKyAxXVxuICAgIGlmIChhICYmIGIpIHtcbiAgICAgIGNvbnN0IGludHZsID0gYi50aW1lIC0gYS50aW1lXG4gICAgICBudW1JbnR2bHMrK1xuICAgICAgdG90YWxJbnR2bCArPSBpbnR2bFxuICAgIH1cbiAgfVxuXG4gIC8vIGF2ZXJhZ2Ugc2FtcGxlcyBhYm92ZSB0byBkZXRlcm1pbmUgaW50ZXJ2YWwgYmV0d2VlbiBwbG90IHBvaW50cyAoZGF0YSByYXRlKVxuICBjb25zdCBpbnR2bCA9IHRvdGFsSW50dmwgLyBudW1JbnR2bHNcblxuICAvLyBkZXRlcm1pbmUgd2hpY2ggcG9pbnRzIHNob3VsZCBiZSBmaWx0ZXJlZCBiYXNlZCBvbiBtYXggcG9pbnRzIHBlciBsaW5lXG4gIGNvbnN0IG1pbk1TSW50ZXJ2YWwgPSBkWCAvIG1heExpbmVQb2ludHNcblxuICBsZXQgcmVuZGVyZWQgPSBbXVxuXG4gIC8vIGZpbHRlciBkYXRhIHBvaW50cyB0byBleGNsdWRlIG9uZXMgaW4gdGhlIGV4Y2x1ZGVkIHRpbWUgaW50ZXJ2YWxzXG4gIGZvcihsZXQgaSA9IDA7IGkgPCBzYW1wbGUubGVuZ3RoOyBpKyspIHtcbiAgICBpZighcmVuZGVyZWQubGVuZ3RoIHx8IGkgPT0gc2FtcGxlLmxlbmd0aCAtIDEpIHtcbiAgICAgIHJlbmRlcmVkLnB1c2goc2FtcGxlW2ldKVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoKHNhbXBsZVtpXS50aW1lIC0gMTYxNDc5OTE2MDAwMCkgJSAgbWluTVNJbnRlcnZhbCA8IGludHZsKSB7XG4gICAgICAgIHJlbmRlcmVkLnB1c2goc2FtcGxlW2ldKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGxldCBsaW5lcyA9IHt9XG4gIGxldCBtYXggPSB7fVxuICBsZXQgbWluID0ge31cbiAgbGV0IGF1dG9TY2FsZSA9IHt9XG5cbiAgZm9yIChsZXQgcHJvcCBvZiBwcm9wZXJ0aWVzKSB7XG4gICAgbGluZXNbcHJvcF0gPSBbXVxuICAgIG1heFtwcm9wXSA9IDBcbiAgICBtaW5bcHJvcF0gPSA5OTk5OTk5OTk5OTk5OVxuICB9XG5cblxuICBmb3IobGV0IGkgPSAwOyBpIDwgcmVuZGVyZWQubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBmcmFtZSA9IHJlbmRlcmVkW2ldXG4gICAgXG4gICAgY29uc3QgeCA9IHBhcnNlSW50KChmcmFtZS50aW1lIC0geE1pbikgKiB4U2NhbGUpXG5cbiAgICBpZih4IDw9IGNhbnZhcy53aWR0aCkge1xuICAgICAgZm9yIChsZXQgcCA9IDA7IHAgPCBmcmFtZS5kYXRhLmxlbmd0aCAmJiBwIDwgbWF4Wm9uZXM7IHArKykge1xuICAgICAgICBjb25zdCBwb2ludCA9IGZyYW1lLmRhdGFbcF1cblxuICAgICAgICBmb3IobGV0IHByb3Agb2YgcHJvcGVydGllcykge1xuICAgICAgICAgIGlmICghbGluZXNbcHJvcF1bcF0pIGxpbmVzW3Byb3BdW3BdID0gW11cbiAgICAgICAgICBsZXQgeSA9IHBvaW50W3Byb3BdXG4gICAgICAgICAgbGluZXNbcHJvcF1bcF0ucHVzaCh7IHgsIHkgfSlcbiAgICAgICAgICBpZih5ID4gbWF4W3Byb3BdKSBtYXhbcHJvcF0gPSB5XG4gICAgICAgICAgaWYoeSA8IG1pbltwcm9wXSkgbWluW3Byb3BdID0geVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yKGxldCBwcm9wIG9mIHByb3BlcnRpZXMpIHtcbiAgICBtaW5bcHJvcF0gPSBNYXRoLm1heChtaW5bcHJvcF0sIDEpXG4gICAgY29uc3QgciA9IG1heFtwcm9wXSAtIG1pbltwcm9wXVxuICAgIGlmKG1heFtwcm9wXSA8IG1pbltwcm9wXSArIDEpIHtcbiAgICAgIG1heFtwcm9wXSA9IG1pbltwcm9wXSArIDFcbiAgICB9XG4gICAgY29uc3QgZXZlbiA9IGkgPT4ge1xuICAgICAgbWluW3Byb3BdID0gLWkgKyBpICogTWF0aC5jZWlsKG1pbltwcm9wXSAvIGkpXG4gICAgICBtYXhbcHJvcF0gPSBpICsgaSAqIE1hdGguZmxvb3IobWF4W3Byb3BdIC8gaSlcbiAgICB9XG4gICAgaWYociA8PSAxMCkge1xuICAgICAgbWF4W3Byb3BdID0gMSArIE1hdGguZmxvb3IobWF4W3Byb3BdKVxuICAgICAgbWluW3Byb3BdID0gLTEgKyBNYXRoLmNlaWwobWluW3Byb3BdKVxuICAgIH0gZWxzZSBpZihyIDw9IDEwMCkge1xuICAgICAgZXZlbigxMClcbiAgICB9IGVsc2UgaWYgKHIgPD0gMTAwMCkge1xuICAgICAgZXZlbigxMDApXG4gICAgfSBlbHNlIGlmIChyIDw9IDEwMDAwKSB7XG4gICAgICBldmVuKDEwMDApXG4gICAgfVxuICAgIFxuICAgIGF1dG9TY2FsZVtwcm9wXSA9IGNhbnZhcy5oZWlnaHQgLyAobWF4W3Byb3BdIC0gbWluW3Byb3BdKVxuICB9XG5cblxuICAvLyBzaW1wbGlmaWVkIGxpbmVzIGZvciByZW5kZXJpbmdcbiAgbGV0IHJlbmRlcmVkTGluZXMgPSB7fVxuXG4gIC8vIHRyYWNrIGFsbCByZW5kZXJlZCB2YWx1ZXMgcGVyIHByb3BlcnR5XG4gIGxldCB5VmFsdWVzID0ge31cblxuXG4gIC8vIGxvb3AgdGhyb3VnaCBwb2ludHMgYW5kIGRldGVybWluZSB3aGljaCBvbmVzIGFyZSBjcml0aWNhbCB0byBnZW9tZXRyeVxuICBmb3IobGV0IHByb3Agb2YgcHJvcGVydGllcykge1xuICAgIHJlbmRlcmVkTGluZXNbcHJvcF0gPSBbXVxuICAgIHlWYWx1ZXNbcHJvcF0gPSB7XG4gICAgICB0b3RhbDogMCxcbiAgICAgIHRvdGFsUG9pbnRzOiAwXG4gICAgfVxuXG4gICAgZm9yKGxldCBpID0gMDsgaSA8IGxpbmVzW3Byb3BdLmxlbmd0aDsgaSsrKSB7XG4gICAgICByZW5kZXJlZExpbmVzW3Byb3BdW2ldID0gW11cblxuICAgICAgZm9yIChsZXQgcCA9IDA7IHAgPCBsaW5lc1twcm9wXVtpXS5sZW5ndGg7IHArKykge1xuICAgICAgICBsZXQgcG9pbnQgPSBsaW5lc1twcm9wXVtpXVtwXVxuICAgICAgICB5VmFsdWVzW3Byb3BdLnRvdGFsICs9IHBvaW50LnlcbiAgICAgICAgeVZhbHVlc1twcm9wXS50b3RhbFBvaW50cyArPSAxXG4gICAgICAgIHBvaW50LnkgPSBwYXJzZUludChjYW52YXMuaGVpZ2h0IC0gKHBvaW50LnkgLSBtaW5bcHJvcF0pICogYXV0b1NjYWxlW3Byb3BdKVxuICAgICAgICByZW5kZXJlZExpbmVzW3Byb3BdW2ldLnB1c2gocG9pbnQpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY29uc3QgY29sb3JzID0ge1xuICAgIGFjdHVhbF90ZW1wOiBcIiNkZDMzMDBcIixcbiAgICBhY3R1YWxfY3VycmVudDogXCIjMDAzM2FhXCIsXG4gICAgYWN0dWFsX3BlcmNlbnQ6IFwiIzMzYWFiYlwiXG4gIH1cblxuICAvLyBjbGVhciBjYW52YXMgZm9yIG5ldyBmcmFtZVxuICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodClcblxuICBsZXQgYXZnID0ge31cblxuICBsZXQgdG90YWxQb2ludHMgPSAwXG4gIGZvcihsZXQgcHJvcCBvZiBwcm9wZXJ0aWVzKSB7XG4gICAgYXZnW3Byb3BdID0geVZhbHVlc1twcm9wXS50b3RhbCAvIHlWYWx1ZXNbcHJvcF0udG90YWxQb2ludHNcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgcmVuZGVyZWRMaW5lc1twcm9wXS5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgbGluZSA9IHJlbmRlcmVkTGluZXNbcHJvcF1baV1cbiAgICAgIHRvdGFsUG9pbnRzICs9IGxpbmUubGVuZ3RoXG4gICAgICBzbW9vdGgoY3R4LCBsaW5lLCBjb2xvcnNbcHJvcF0sIDIpXG4gICAgfVxuICB9XG5cbiAgbG9nU3RhdHMoeyB0b3RhbFBvaW50cywgbWF4LCBtaW4sIGF2ZyB9KVxufVxuXG5leHBvcnQgZGVmYXVsdCBkcmF3IiwiaW1wb3J0IHJlbmRlckxpbmUgZnJvbSAnLi9saW5lLXBsb3QnXG5pbXBvcnQgYnVmZmVyIGZyb20gJy4vYnVmZmVyJ1xuXG5jb25zb2xlLmxvZygnY2hhcnQgd29ya2VyIGludGlhbGl6ZWQnKVxuXG5jb25zdCByZW5kZXJlcnMgPSB7XG4gICdsaW5lJzogcmVuZGVyTGluZVxufVxuXG5sZXQgY2hhcnREYXRhID0ge1xuICBjYW52YXM6IG51bGwsXG4gIGN0eDogbnVsbCxcbiAgdHlwZTogJycsXG4gIHByb3BlcnRpZXM6IFtdLFxuICBzY2FsZToge1xuICAgIHg6IDEwLFxuICAgIHk6ICdhdXRvJ1xuICB9XG59XG5cbmxldCBwb3J0XG5cblxubGV0IHN0YXRzID0ge31cbmNvbnN0IGxvZ1N0YXRzID0gcyA9PiBzdGF0cyA9IHNcblxuXG5sZXQgcmVuZGVyVGltZXMgPSBbXVxuXG5sZXQgbGFzdCA9IDBcbmNvbnN0IGRyYXcgPSAoKSA9PiB7XG4gIGNvbnN0IHQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKVxuICBpZiAoY2hhcnREYXRhLmN0eCkge1xuICAgIGlmIChyZW5kZXJlcnNbY2hhcnREYXRhLnR5cGVdKSB7XG4gICAgICByZW5kZXJlcnNbY2hhcnREYXRhLnR5cGVdKGNoYXJ0RGF0YSwgbG9nU3RhdHMpXG4gICAgICByZW5kZXJUaW1lcy5wdXNoKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gbGFzdClcbiAgICB9XG4gIH1cbiAgbGFzdCA9IHRcbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGRyYXcpXG59XG5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZHJhdylcblxubGV0IGxhc3RCdWZmZXJcblxuY29uc3QgY29sbGVjdFN0YXRzID0gKCkgPT4ge1xuXG4gIGNvbnN0IHRvdGFsUmVuZGVyID0gcmVuZGVyVGltZXMucmVkdWNlKCh0LCB0b3RhbCkgPT4gdG90YWwgKyB0LCAwKVxuICBjb25zdCBhdmdSZW5kZXIgPSB0b3RhbFJlbmRlciAvIHJlbmRlclRpbWVzLmxlbmd0aFxuICBjb25zdCBmcmFtZXJhdGUgPSBNYXRoLnJvdW5kKDEwMDAgLyBhdmdSZW5kZXIpXG4gIHJlbmRlclRpbWVzID0gW11cblxuICBwb3N0TWVzc2FnZSh7IC4uLnN0YXRzLCBmcmFtZXJhdGUgfSlcbn1cblxuc2V0SW50ZXJ2YWwoY29sbGVjdFN0YXRzLCAzMDApXG5cblxuXG5cbmNvbnN0IGluaXRpYWxpemUgPSBhc3luYyAoKSA9PiB7XG4gIHBvcnQub25tZXNzYWdlID0gZSA9PiB7XG4gICAgLy8gY29uc29sZS5sb2coZSlcbiAgICBjb25zdCB7IGRhdGEgfSA9IGUuZGF0YVxuICAgIGNvbnN0IHsgbXQgfSA9IGRhdGFcbiAgICBpZiAobXQgPT0gNikge1xuICAgICAgbGV0IHsgcmVjb3JkcyB9ID0gZGF0YVxuICAgICAgY29uc3QgdHMgPSBlLmRhdGEudHMuZ2V0VGltZSgpXG4gICAgICAvLyByZWNvcmRzID0gcmVjb3Jkcy5zbGljZSgwLCAxKVxuICAgICAgcmVjb3JkcyA9IHJlY29yZHMuY29uY2F0KHJlY29yZHMpLmNvbmNhdChyZWNvcmRzKVxuICAgICAgLy8gcmVjb3JkcyA9IHJlY29yZHMuc2xpY2UoMCwgbWF4Wm9uZXMpXG5cblxuICAgICAgLy8gdGVzdCB0d2VlbmluZ1xuICAgICAgaWYobGFzdEJ1ZmZlcikge1xuICAgICAgICBmb3IobGV0IHggb2YgWyAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEgXSkge1xuICAgICAgICAvLyBmb3IobGV0IHggb2YgWyAxLCAzLCA1LCA3LCA5LCAxMSBdKSB7XG4gICAgICAgIC8vIGZvcihsZXQgeCBvZiBbIDYgXSkge1xuICAgICAgICAgIGxldCB0d2VlbiA9IFtdXG4gICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHJlY29yZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGxhc3QgPSBsYXN0QnVmZmVyW2ldXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50ID0gcmVjb3Jkc1tpXVxuICAgICAgICAgICAgaWYobGFzdCAmJiBjdXJyZW50KSB7XG4gICAgICAgICAgICAgIGxldCB0d2VlbmVkID0geyAuLi5jdXJyZW50IH1cbiAgICAgICAgICAgICAgZm9yIChsZXQgcHJvcCBvZiBjaGFydERhdGEucHJvcGVydGllcykge1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHByb3ApXG4gICAgICAgICAgICAgICAgY29uc3QgZGVsdGEgPSAoY3VycmVudFtwcm9wXSAtIGxhc3RbcHJvcF0pIC8gMTJcbiAgICAgICAgICAgICAgICB0d2VlbmVkW3Byb3BdID0gbGFzdFtwcm9wXSArIGRlbHRhICogeFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHR3ZWVuLnB1c2godHdlZW5lZClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gNTAwIC8gMTIgKiB4XG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiBidWZmZXIud3JpdGUoeyB0czogdHMgLSA1MDAgKyBvZmZzZXQsIGRhdGE6IHR3ZWVuIH0pLCBvZmZzZXQpXG4gICAgICAgIH1cbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiBidWZmZXIud3JpdGUoeyB0cywgZGF0YTogcmVjb3JkcyB9KSwgNTAwKVxuICAgICAgfVxuICAgICAgbGFzdEJ1ZmZlciA9IHJlY29yZHNcbiAgICB9XG4gIH1cblxuICBwb3J0LnBvc3RNZXNzYWdlKHtcbiAgICBjb21tYW5kOiAnY29ubmVjdCcsXG4gICAgY2hhbm5lbHM6IFsgJ3Rjem9uZScgXVxuICB9KVxufVxuXG5cbm9ubWVzc2FnZSA9IGUgPT4ge1xuICBpZiAoZS5kYXRhLndzUG9ydCkge1xuICAgIHBvcnQgPSBlLmRhdGEud3NQb3J0XG4gICAgaW5pdGlhbGl6ZSgpXG4gIH0gZWxzZSBpZiAoZS5kYXRhID09ICdjbG9zZScpIHtcbiAgICBwb3J0LnBvc3RNZXNzYWdlKHsgY29tbWFuZDogJ2Nsb3NlJyB9KVxuICB9IGVsc2Uge1xuICAgIGNoYXJ0RGF0YSA9IHsgLi4uY2hhcnREYXRhLCAuLi5lLmRhdGEgfVxuICAgIC8vIGNvbnNvbGUubG9nKCd1cGRhdGluZyBkYXRhJywgY2hhcnREYXRhKVxuICAgIGlmIChjaGFydERhdGEucGF1c2VkKSB7XG4gICAgICBidWZmZXIucGF1c2UoKVxuICAgIH0gZWxzZSB7XG4gICAgICBidWZmZXIucGxheSgpXG4gICAgfVxuICAgIGlmIChlLmRhdGEuY2FudmFzKSB7XG4gICAgICBjaGFydERhdGEuY3R4ID0gY2hhcnREYXRhLmNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIilcbiAgICB9XG4gIH1cbn0iXSwibmFtZXMiOlsicmVuZGVyTGluZSIsImRyYXciXSwibWFwcGluZ3MiOiI7OztFQUFBLElBQUksTUFBTSxHQUFHO0VBQ2IsRUFBRSxPQUFPLEVBQUUsRUFBRTtFQUNiLEVBQUUsTUFBTSxFQUFFLEVBQUU7RUFDWixFQUFFLE1BQU0sRUFBRSxLQUFLO0VBQ2YsRUFBQztBQUdEO0VBQ0EsTUFBTSxDQUFDLEtBQUssR0FBRyxTQUFTLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFO0VBQ3RDLEVBQUUsTUFBTSxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsRUFBRSxFQUFDO0VBQzNCLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBQztFQUMvQyxFQUFFLE1BQU0sQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEVBQUM7RUFDOUMsRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtFQUNyQixJQUFJLE1BQU0sQ0FBQyxNQUFNLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxPQUFPLEdBQUU7RUFDekMsR0FBRztFQUNIO0VBQ0EsRUFBQztFQUNELE1BQU0sQ0FBQyxJQUFJLEdBQUcsTUFBTSxNQUFNLENBQUMs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RUFBRTtFQUNsRSxRQUFRLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFDO0FBQ25DO0VBQ0EsUUFBUSxJQUFJLElBQUksSUFBSSxJQUFJLFVBQVUsRUFBRTtFQUNwQyxVQUFVLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUU7RUFDbEQsVUFBVSxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFDO0VBQzdCLFVBQVUsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBQztFQUN2QyxVQUFVLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBQztFQUN6QyxVQUFVLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBQztFQUN6QyxTQUFTO0VBQ1QsT0FBTztFQUNQLEtBQUs7RUFDTCxHQUFHO0FBQ0g7RUFDQSxFQUFFLElBQUksSUFBSSxJQUFJLElBQUksVUFBVSxFQUFFO0VBQzlCLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBQztFQUN0QyxJQUFJLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsSUFBSSxFQUFDO0VBQ25DLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTtFQUNsQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFB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
