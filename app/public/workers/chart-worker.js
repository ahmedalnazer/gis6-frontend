(function () {
  'use strict';

  let buffer$1 = {
    entries: [],
    active: [],
    paused: false
  };


  buffer$1.write = function(data) {
    // console.log('updating', data)
    buffer$1.entries = [ ...buffer$1.entries, ...data ].slice(-7500);
    buffer$1.entries.sort((a, b) => a.time - b.time);
    if(!buffer$1.paused) {
      buffer$1.active = [ ...buffer$1.entries ];
    }
  };
  buffer$1.play = () => buffer$1.paused = false;
  buffer$1.pause = () => buffer$1.paused = true;

  function smooth(ctx, points, color, width) {
    ctx.strokeStyle = color;
    ctx.lineWidth = width;
    // ctx.strokeRect(20, 20, 150, 100)

    ctx.beginPath();
    if (points == undefined || points.length == 0) {
      return true
    }
    if (points.length == 1) {
      ctx.moveTo(points[0].x, points[0].y);
      ctx.lineTo(points[0].x, points[0].y);
      return true
    }
    if (points.length == 2) {
      ctx.moveTo(points[0].x, points[0].y);
      ctx.lineTo(points[1].x, points[1].y);
      return true
    }
    ctx.moveTo(points[0].x, points[0].y);
    for (var i = 0; i < points.length - 2; i++) {
      // ctx.lineTo(points[i].x, points[i].y)
      var xc = (points[i].x + points[i + 1].x) / 2;
      var yc = (points[i].y + points[i + 1].y) / 2;
      // ctx.lineTo(points[i].x, points[i].y)
      ctx.quadraticCurveTo(points[i].x, points[i].y, xc, yc);
    }
    ctx.quadraticCurveTo(points[i].x, points[i].y, points[i + 1].x, points[i + 1].y);
    ctx.stroke();
  }

  const colors = {
    1: '#A103FF',
    2: '#FF9C03',
    3: '#03CFFF',
    4: '#2E03FF'
  };

  // properties which allow negative values
  const negatives = [ 'deviation' ];

  const getBit = (int, bit) => !!(int & 1 << bit);

  const getSettings = (zone) => {
    let settings = {
      locked: getBit(zone.settings, 0),
      sealed: getBit(zone.settings, 1),
      on: getBit(zone.settings, 2),
      auto: getBit(zone.settings, 3),
      standby: getBit(zone.settings, 4),
      boost: getBit(zone.settings, 5),
      testing: getBit(zone.settings, 6),
      test_complete: getBit(zone.settings, 7)
    };
    return settings
  };



  const draw$1 = (chartData, logStats) => {
    const { canvas, ctx, scale, paused, zones } = chartData;

    const _props = chartData.properties;
    const properties = _props.filter(x => !!x);

    let maxLinePoints = 80;

    // if(zones.length > 10) maxLinePoints = 60

    // if(zones.length > 50) maxLinePoints = 30

    // if(zones.length > 100) maxLinePoints = 10
    
    const latest = buffer$1.active[buffer$1.active.length - 1];
    let xRange = scale && scale.x ? parseInt(scale.x) : 10;

    if(isNaN(xRange)) xRange = 10;

    const now = new Date().getTime() - 1000;
    let xMax = paused ? latest ? latest.time : now : now;
    let xMin = xMax - xRange * 1000;
    let renderLimit = xMin - 2000;
    let dX = xMax - xMin;

    // let sample = buffer.active.filter(x => x.time > renderLimit)

    let sample = [];

    for (let i = buffer$1.active.length; i >= 0; i--) {
      const frame = buffer$1.active[i];
      // console.log(frame && frame.time, renderLimit)
      if (frame) {
        if (frame.time >= renderLimit) {
          sample.unshift(frame);
        } else {
          break
        }
      }
    }

    const xScale = canvas.width / (xMax - xMin);

    let numIntvls = 0;
    let totalIntvl = 0;

    // sample 50 frames to get average interval (mitigate effect of latency)
    for (let i = 0; i < 50; i++) {
      let a = sample[i];
      let b = sample[i + 1];
      if (a && b) {
        const intvl = b.time - a.time;
        numIntvls++;
        totalIntvl += intvl;
      }
    }

    // average samples above to determine interval between plot points (data rate)
    const intvl = totalIntvl / numIntvls;

    // determine which points should be filtered based on max points per line
    const minMSInterval = dX / maxLinePoints;

    let rendered = [];

    // filter data points to exclude ones in the excluded time intervals
    for(let i = 0; i < sample.length; i++) {
      if(i == 0 || !rendered.length || i == sample.length - 1) {
        rendered.push(sample[i]);
      } else {
        if ((sample[i].time - 1614799160000) %  minMSInterval < intvl) {
          rendered.push(sample[i]);
        }
      }
    }

    // rendered.reverse()

    let lines = {};
    let max = {};
    let min = {};
    let autoScale = {};

    for (let prop of properties) {
      lines[prop] = [];
      max[prop] = 0;
      min[prop] = 99999999999999;
    }


    for(let i = 0; i < rendered.length; i++) {
      const frame = rendered[i];
      
      const x = (frame.time - xMin) * xScale;

      for (let z of zones) {
        const point = frame.data[z - 1];

        for (let prop of properties) {
          if (!lines[prop][z - 1]) lines[prop][z - 1] = [];
          let y = point[prop];
          if (prop == 'deviation') {
            const settings = getSettings(point);
            if (!settings.on) {
              y = 0;
            } else {
              y = point.temp_sp - point.actual_temp;
            }
          }
          lines[prop][z - 1].push({ x, y });
          if (y > max[prop]) max[prop] = y;
          if (y < min[prop]) min[prop] = y;
        }
      }
    }

    for(let prop of properties) {

      const scaleParams = scale.y && scale.y[prop];

      if(!negatives.includes(prop)) {
        min[prop] = Math.max(min[prop], 1);
      }
      // if (max[prop] < min[prop] + 10) {
      //   max[prop] = min[prop] + 10
      // }
      const r = max[prop] - min[prop];

      // ensure round numbers are used for the scale
      const even = i => {
        min[prop] = -i + i * Math.ceil(min[prop] / i);
        max[prop] = i + i * Math.floor(max[prop] / i);
      };

      if(r <= 100) {
        even(20);
      } else if (r <= 1000) {
        even(200);
      } else if (r <= 10000) {
        even(2000);
      } else {
        even(20000);
      }

      if (scaleParams) {
        if (scaleParams.min != 'auto') min[prop] = scaleParams.min * 10;
        if (scaleParams.max != 'auto') max[prop] = scaleParams.max * 10;
      }
      
      autoScale[prop] = canvas.height / (max[prop] - min[prop]);
    }


    // simplified lines for rendering
    let renderedLines = {};

    // track all rendered values per property
    let yValues = {};

    let totalPoints = 0;


    // loop through points and determine which ones are critical to geometry
    for(let prop of properties) {
      renderedLines[prop] = [];
      yValues[prop] = {
        total: 0,
        totalPoints: 0
      };

      for(let i = 0; i < lines[prop].length; i++) {
        if(lines[prop][i]) {
          renderedLines[prop][i] = [];

          for (let p = 0; p < lines[prop][i].length; p++) {
            let point = lines[prop][i][p];
            yValues[prop].total += point.y;
            yValues[prop].totalPoints += 1;
            point.y = parseInt(canvas.height - (point.y - min[prop]) * autoScale[prop]);
            renderedLines[prop][i].push(point);
            totalPoints++;
          }
        }
      }
    }

    const lineColors = {
      [_props[0]]: colors[1],
      [_props[1]]: colors[2],
      [_props[2]]: colors[3],
      [_props[3]]: colors[4]
    };

    // clear canvas for new frame
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    let avg = {};
    for(let prop of properties) {
      avg[prop] = yValues[prop].total / yValues[prop].totalPoints;
      for(let i = 0; i < renderedLines[prop].length; i++) {
        if(renderedLines[prop][i]) {
          const line = renderedLines[prop][i];
          smooth(ctx, line, lineColors[prop], 1);
        }
      }
    }

    logStats({ totalPoints, max, min, avg });
  };

  const maxChunkSize = 200;

  let buffer = [];

  buffer.write = function ({ ts, data }) {

    // simulate 450 zones
    data = data.concat(data).concat(data);

    const date = new Date(ts);
    const frame = { data, date, time: ts };

    // buffer.push(frame)
    tween(frame, 12);

    buffer = buffer.slice(-7500);
  };






  // utilities for testing

  const tween = (next, frames) => {

    let frameList = [];
    for (let i = 1; i < frames; i++) {
      frameList.push(i);
    }

    const { time, data } = next;
    const lastBuffer = buffer[buffer.length - 1];

    // test tweening
    if (lastBuffer) {
      for (let x of frameList) {
        let tween = [];
        for (let i = 0; i < lastBuffer.data.length; i++) {
          const last = lastBuffer.data[i];
          const current = data[i];
          if (last && current) {
            let tweened = { ...current };
            for (let prop of [ 'actual_temp', 'actual_current', 'actual_percent' ]) {
              // console.log(prop)
              const delta = (current[prop] - last[prop]) / frames;
              tweened[prop] = last[prop] + delta * x;
            }
            tween.push(tweened);
          }
        }
        const offset = 500 / frames * x;
        const updatedTS = time - 500 + offset;
        const date = new Date(updatedTS);
        setTimeout(() => buffer.push({ time: updatedTS, date, data: tween }), offset);
      }
    }
    setTimeout(() => buffer.push(next), 500);
  };

  const renderers = {
    'line': draw$1
  };

  let chartData = {
    canvas: null,
    ctx: null,
    type: '',
    properties: [],
    scale: {
      x: 10,
      y: 'auto'
    }
  };

  let port;


  let stats = {};
  const logStats = s => stats = { ...stats, ...s };


  let renderTimes = [];

  let last = 0;
  const draw = () => {
    const t = new Date().getTime();
    if (chartData.ctx) {
      if (renderers[chartData.type]) {
        renderers[chartData.type](chartData, logStats);
        renderTimes.push(new Date().getTime() - last);
      }
    }
    last = t;
    requestAnimationFrame(draw);
  };
  requestAnimationFrame(draw);

  const collectStats = () => {

    const totalRender = renderTimes.reduce((t, total) => total + t, 0);
    const avgRender = totalRender / renderTimes.length;
    const framerate = Math.round(1000 / avgRender);
    renderTimes = [];

    postMessage({ ...stats, framerate });
  };

  setInterval(collectStats, 300);




  const initialize = async () => {
    port.onmessage = e => {
      const { data } = e;
      // console.log(data)
      if(data.update && data.update.length == maxChunkSize) {
        stats.loading = true;
      } else {
        stats.loading = false;
      }
      buffer$1.write(data.update);
    };

    port.postMessage({ command: 'readBuffer' });
  };


  onmessage = e => {
    if (e.data.wsPort) {
      port = e.data.wsPort;
      initialize();
    } else if (e.data == 'close') {
      port.postMessage({ command: 'close' });
    } else {
      chartData = { ...chartData, ...e.data };
      // console.log('updating data', chartData)
      if (chartData.paused) {
        buffer$1.pause();
      } else {
        buffer$1.play();
      }
      if (e.data.canvas) {
        chartData.ctx = chartData.canvas.getContext("2d");
      }
    }
  };

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
