(function () {
  'use strict';

  let buffer = {
    entries: [],
    active: [],
    paused: false
  };

  buffer.write = function({ ts, data }) {
    const date = new Date(ts);
    buffer.entries.push({ data, date, time: ts });
    buffer.entries = buffer.entries.slice(-7500);
    if(!buffer.paused) {
      buffer.active = [ ...buffer.entries ];
    }
  };
  buffer.play = () => buffer.paused = false;
  buffer.pause = () => buffer.paused = true;

  function smooth(ctx, points, color, width) {
    ctx.strokeStyle = color;
    ctx.lineWidth = width;
    // ctx.strokeRect(20, 20, 150, 100)

    ctx.beginPath();
    if (points == undefined || points.length == 0) {
      return true
    }
    if (points.length == 1) {
      ctx.moveTo(points[0].x, points[0].y);
      ctx.lineTo(points[0].x, points[0].y);
      return true
    }
    if (points.length == 2) {
      ctx.moveTo(points[0].x, points[0].y);
      ctx.lineTo(points[1].x, points[1].y);
      return true
    }
    ctx.moveTo(points[0].x, points[0].y);
    for (var i = 0; i < points.length - 2; i++) {
      // ctx.lineTo(points[i].x, points[i].y)
      var xc = (points[i].x + points[i + 1].x) / 2;
      var yc = (points[i].y + points[i + 1].y) / 2;
      // ctx.lineTo(points[i].x, points[i].y)
      ctx.quadraticCurveTo(points[i].x, points[i].y, xc, yc);
    }
    ctx.quadraticCurveTo(points[i].x, points[i].y, points[i + 1].x, points[i + 1].y);
    ctx.stroke();
  }

  const colors = {
    1: '#A103FF',
    2: '#FF9C03',
    3: '#03CFFF',
    4: '#2E03FF'
  };

  // properties which allow negative values
  const negatives = [ 'deviation' ];

  const getBit = (int, bit) => !!(int & 1 << bit);

  const getSettings = (zone) => {
    let settings = {
      locked: getBit(zone.settings, 0),
      sealed: getBit(zone.settings, 1),
      on: getBit(zone.settings, 2),
      auto: getBit(zone.settings, 3),
      standby: getBit(zone.settings, 4),
      boost: getBit(zone.settings, 5),
      testing: getBit(zone.settings, 6),
      test_complete: getBit(zone.settings, 7)
    };
    return settings
  };



  const draw = (chartData, logStats) => {
    const { canvas, ctx, scale, paused, zones } = chartData;

    const _props = chartData.properties;
    const properties = _props.filter(x => !!x);

    let maxLinePoints = 80;

    // if(zones.length > 10) maxLinePoints = 60

    // if(zones.length > 50) maxLinePoints = 30

    // if(zones.length > 100) maxLinePoints = 10
    
    const latest = buffer.active[buffer.active.length - 1];
    let xRange = scale && scale.x ? parseInt(scale.x) : 10;

    if(isNaN(xRange)) xRange = 10;

    const now = new Date().getTime() - 1000;
    let xMax = paused ? latest ? latest.time : now : now;
    let xMin = xMax - xRange * 1000;
    let renderLimit = xMin - 2000;
    let dX = xMax - xMin;

    // let sample = buffer.active.filter(x => x.time > renderLimit)

    let sample = [];

    for (let i = buffer.active.length; i >= 0; i--) {
      const frame = buffer.active[i];
      // console.log(frame && frame.time, renderLimit)
      if (frame) {
        if (frame.time >= renderLimit) {
          sample.unshift(frame);
        } else {
          break
        }
      }
    }

    const xScale = canvas.width / (xMax - xMin);

    let numIntvls = 0;
    let totalIntvl = 0;

    // sample 50 frames to get average interval (mitigate effect of latency)
    for (let i = 0; i < 50; i++) {
      let a = sample[i];
      let b = sample[i + 1];
      if (a && b) {
        const intvl = b.time - a.time;
        numIntvls++;
        totalIntvl += intvl;
      }
    }

    // average samples above to determine interval between plot points (data rate)
    const intvl = totalIntvl / numIntvls;

    // determine which points should be filtered based on max points per line
    const minMSInterval = dX / maxLinePoints;

    let rendered = [];

    // filter data points to exclude ones in the excluded time intervals
    for(let i = 0; i < sample.length; i++) {
      if(i == 0 || !rendered.length || i == sample.length - 1) {
        rendered.push(sample[i]);
      } else {
        if ((sample[i].time - 1614799160000) %  minMSInterval < intvl) {
          rendered.push(sample[i]);
        }
      }
    }

    // rendered.reverse()

    let lines = {};
    let max = {};
    let min = {};
    let autoScale = {};

    for (let prop of properties) {
      lines[prop] = [];
      max[prop] = 0;
      min[prop] = 99999999999999;
    }


    for(let i = 0; i < rendered.length; i++) {
      const frame = rendered[i];
      
      const x = (frame.time - xMin) * xScale;

      for (let z of zones) {
        const point = frame.data[z - 1];

        for (let prop of properties) {
          if (!lines[prop][z - 1]) lines[prop][z - 1] = [];
          let y = point[prop];
          if (prop == 'deviation') {
            const settings = getSettings(point);
            if (!settings.on) {
              y = 0;
            } else {
              y = point.temp_sp - point.actual_temp;
            }
          }
          lines[prop][z - 1].push({ x, y });
          if (y > max[prop]) max[prop] = y;
          if (y < min[prop]) min[prop] = y;
        }
      }
    }

    for(let prop of properties) {
      if(!negatives.includes(prop)) {
        min[prop] = Math.max(min[prop], 1);
      }
      // if (max[prop] < min[prop] + 10) {
      //   max[prop] = min[prop] + 10
      // }
      const r = max[prop] - min[prop];

      // ensure round numbers are used for the scale
      const even = i => {
        min[prop] = -i + i * Math.ceil(min[prop] / i);
        max[prop] = i + i * Math.floor(max[prop] / i);
      };

      if(r <= 100) {
        even(20);
      } else if (r <= 1000) {
        even(200);
      } else if (r <= 10000) {
        even(2000);
      } else {
        even(20000);
      }
      
      autoScale[prop] = canvas.height / (max[prop] - min[prop]);
    }


    // simplified lines for rendering
    let renderedLines = {};

    // track all rendered values per property
    let yValues = {};

    let totalPoints = 0;


    // loop through points and determine which ones are critical to geometry
    for(let prop of properties) {
      renderedLines[prop] = [];
      yValues[prop] = {
        total: 0,
        totalPoints: 0
      };

      for(let i = 0; i < lines[prop].length; i++) {
        if(lines[prop][i]) {
          renderedLines[prop][i] = [];

          for (let p = 0; p < lines[prop][i].length; p++) {
            let point = lines[prop][i][p];
            yValues[prop].total += point.y;
            yValues[prop].totalPoints += 1;
            point.y = parseInt(canvas.height - (point.y - min[prop]) * autoScale[prop]);
            renderedLines[prop][i].push(point);
            totalPoints++;
          }
        }
      }
    }

    const lineColors = {
      [_props[0]]: colors[1],
      [_props[1]]: colors[2],
      [_props[2]]: colors[3],
      [_props[3]]: colors[4]
    };

    // clear canvas for new frame
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    let avg = {};
    for(let prop of properties) {
      avg[prop] = yValues[prop].total / yValues[prop].totalPoints;
      for(let i = 0; i < renderedLines[prop].length; i++) {
        if(renderedLines[prop][i]) {
          const line = renderedLines[prop][i];
          smooth(ctx, line, lineColors[prop], 1);
        }
      }
    }

    logStats({ totalPoints, max, min, avg });
  };

  console.log('chart worker intialized');

  const renderers = {
    'line': draw
  };

  let chartData = {
    canvas: null,
    ctx: null,
    type: '',
    properties: [],
    scale: {
      x: 10,
      y: 'auto'
    }
  };

  let port;


  let stats = {};
  const logStats = s => stats = s;


  let renderTimes = [];

  let last = 0;
  const draw$1 = () => {
    const t = new Date().getTime();
    if (chartData.ctx) {
      if (renderers[chartData.type]) {
        renderers[chartData.type](chartData, logStats);
        renderTimes.push(new Date().getTime() - last);
      }
    }
    last = t;
    requestAnimationFrame(draw$1);
  };
  requestAnimationFrame(draw$1);

  let lastBuffer;

  const collectStats = () => {

    const totalRender = renderTimes.reduce((t, total) => total + t, 0);
    const avgRender = totalRender / renderTimes.length;
    const framerate = Math.round(1000 / avgRender);
    renderTimes = [];

    postMessage({ ...stats, framerate });
  };

  setInterval(collectStats, 300);




  const initialize = async () => {
    port.onmessage = e => {
      // console.log(e)
      const { data } = e.data;
      const { mt } = data;
      if (mt == 6) {
        let { records } = data;
        const ts = e.data.ts.getTime();
        // records = records.slice(0, 1)
        records = records.concat(records).concat(records);
        // records = records.slice(0, maxZones)


        // test tweening
        if(lastBuffer) {
          // for(let x of [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ]) {
          for(let x of [ 2.4, 4.8, 7.2, 9.6 ]) {
          // for(let x of [ 6 ]) {
            let tween = [];
            for(let i = 0; i < records.length; i++) {
              const last = lastBuffer[i];
              const current = records[i];
              if(last && current) {
                let tweened = { ...current };
                for (let prop of chartData.properties) {
                  // console.log(prop)
                  const delta = (current[prop] - last[prop]) / 12;
                  tweened[prop] = last[prop] + delta * x;
                }
                tween.push(tweened);
              }
            }
            const offset = 500 / 12 * x;
            setTimeout(() => buffer.write({ ts: ts - 500 + offset, data: tween }), offset);
          }
          setTimeout(() => buffer.write({ ts, data: records }), 500);
        }
        lastBuffer = records;
      }
    };

    port.postMessage({
      command: 'connect',
      channels: [ 'tczone' ]
    });
  };


  onmessage = e => {
    if (e.data.wsPort) {
      port = e.data.wsPort;
      initialize();
    } else if (e.data == 'close') {
      port.postMessage({ command: 'close' });
    } else {
      chartData = { ...chartData, ...e.data };
      // console.log('updating data', chartData)
      if (chartData.paused) {
        buffer.pause();
      } else {
        buffer.play();
      }
      if (e.data.canvas) {
        chartData.ctx = chartData.canvas.getContext("2d");
      }
    }
  };

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnQtd29ya2VyLmpzIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZGF0YS9jaGFydGluZy9idWZmZXIuanMiLCIuLi8uLi9zcmMvZGF0YS9jaGFydGluZy9saW5lLXV0aWxzLmpzIiwiLi4vLi4vc3JjL2RhdGEvY2hhcnRpbmcvbGluZS1wbG90LmpzIiwiLi4vLi4vc3JjL2RhdGEvY2hhcnRpbmcvY2hhcnQtd29ya2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImxldCBidWZmZXIgPSB7XG4gIGVudHJpZXM6IFtdLFxuICBhY3RpdmU6IFtdLFxuICBwYXVzZWQ6IGZhbHNlXG59XG5cbmV4cG9ydCBkZWZhdWx0IGJ1ZmZlclxuXG5idWZmZXIud3JpdGUgPSBmdW5jdGlvbih7IHRzLCBkYXRhIH0pIHtcbiAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKHRzKVxuICBidWZmZXIuZW50cmllcy5wdXNoKHsgZGF0YSwgZGF0ZSwgdGltZTogdHMgfSlcbiAgYnVmZmVyLmVudHJpZXMgPSBidWZmZXIuZW50cmllcy5zbGljZSgtNzUwMClcbiAgaWYoIWJ1ZmZlci5wYXVzZWQpIHtcbiAgICBidWZmZXIuYWN0aXZlID0gWyAuLi5idWZmZXIuZW50cmllcyBdXG4gIH1cbn1cbmJ1ZmZlci5wbGF5ID0gKCkgPT4gYnVmZmVyLnBhdXNlZCA9IGZhbHNlXG5idWZmZXIucGF1c2UgPSAoKSA9PiBidWZmZXIucGF1c2VkID0gdHJ1ZVxuIiwiXG5leHBvcnQgZnVuY3Rpb24gc21vb3RoKGN0eCwgcG9pbnRzLCBjb2xvciwgd2lkdGgpIHtcbiAgY3R4LnN0cm9rZVN0eWxlID0gY29sb3JcbiAgY3R4LmxpbmVXaWR0aCA9IHdpZHRoXG4gIC8vIGN0eC5zdHJva2VSZWN0KDIwLCAyMCwgMTUwLCAxMDApXG5cbiAgY3R4LmJlZ2luUGF0aCgpXG4gIGlmIChwb2ludHMgPT0gdW5kZWZpbmVkIHx8IHBvaW50cy5sZW5ndGggPT0gMCkge1xuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgaWYgKHBvaW50cy5sZW5ndGggPT0gMSkge1xuICAgIGN0eC5tb3ZlVG8ocG9pbnRzWzBdLngsIHBvaW50c1swXS55KVxuICAgIGN0eC5saW5lVG8ocG9pbnRzWzBdLngsIHBvaW50c1swXS55KVxuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgaWYgKHBvaW50cy5sZW5ndGggPT0gMikge1xuICAgIGN0eC5tb3ZlVG8ocG9pbnRzWzBdLngsIHBvaW50c1swXS55KVxuICAgIGN0eC5saW5lVG8ocG9pbnRzWzFdLngsIHBvaW50c1sxXS55KVxuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgY3R4Lm1vdmVUbyhwb2ludHNbMF0ueCwgcG9pbnRzWzBdLnkpXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aCAtIDI7IGkrKykge1xuICAgIC8vIGN0eC5saW5lVG8ocG9pbnRzW2ldLngsIHBvaW50c1tpXS55KVxuICAgIHZhciB4YyA9IChwb2ludHNbaV0ueCArIHBvaW50c1tpICsgMV0ueCkgLyAyXG4gICAgdmFyIHljID0gKHBvaW50c1tpXS55ICsgcG9pbnRzW2kgKyAxXS55KSAvIDJcbiAgICAvLyBjdHgubGluZVRvKHBvaW50c1tpXS54LCBwb2ludHNbaV0ueSlcbiAgICBjdHgucXVhZHJhdGljQ3VydmVUbyhwb2ludHNbaV0ueCwgcG9pbnRzW2ldLnksIHhjLCB5YylcbiAgfVxuICBjdHgucXVhZHJhdGljQ3VydmVUbyhwb2ludHNbaV0ueCwgcG9pbnRzW2ldLnksIHBvaW50c1tpICsgMV0ueCwgcG9pbnRzW2kgKyAxXS55KVxuICBjdHguc3Ryb2tlKClcbn0iLCJpbXBvcnQgYnVmZmVyIGZyb20gJy4vYnVmZmVyJ1xuaW1wb3J0IHsgc21vb3RoIH0gZnJvbSAnLi9saW5lLXV0aWxzJ1xuXG5leHBvcnQgY29uc3QgY29sb3JzID0ge1xuICAxOiAnI0ExMDNGRicsXG4gIDI6ICcjRkY5QzAzJyxcbiAgMzogJyMwM0NGRkYnLFxuICA0OiAnIzJFMDNGRidcbn1cblxuLy8gcHJvcGVydGllcyB3aGljaCBhbGxvdyBuZWdhdGl2ZSB2YWx1ZXNcbmNvbnN0IG5lZ2F0aXZlcyA9IFsgJ2RldmlhdGlvbicgXVxuXG5jb25zdCBnZXRCaXQgPSAoaW50LCBiaXQpID0+ICEhKGludCAmIDEgPDwgYml0KVxuXG5jb25zdCBnZXRTZXR0aW5ncyA9ICh6b25lKSA9PiB7XG4gIGxldCBzZXR0aW5ncyA9IHtcbiAgICBsb2NrZWQ6IGdldEJpdCh6b25lLnNldHRpbmdzLCAwKSxcbiAgICBzZWFsZWQ6IGdldEJpdCh6b25lLnNldHRpbmdzLCAxKSxcbiAgICBvbjogZ2V0Qml0KHpvbmUuc2V0dGluZ3MsIDIpLFxuICAgIGF1dG86IGdldEJpdCh6b25lLnNldHRpbmdzLCAzKSxcbiAgICBzdGFuZGJ5OiBnZXRCaXQoem9uZS5zZXR0aW5ncywgNCksXG4gICAgYm9vc3Q6IGdldEJpdCh6b25lLnNldHRpbmdzLCA1KSxcbiAgICB0ZXN0aW5nOiBnZXRCaXQoem9uZS5zZXR0aW5ncywgNiksXG4gICAgdGVzdF9jb21wbGV0ZTogZ2V0Qml0KHpvbmUuc2V0dGluZ3MsIDcpXG4gIH1cbiAgcmV0dXJuIHNldHRpbmdzXG59XG5cblxuXG5jb25zdCBkcmF3ID0gKGNoYXJ0RGF0YSwgbG9nU3RhdHMpID0+IHtcbiAgY29uc3QgeyBjYW52YXMsIGN0eCwgc2NhbGUsIHBhdXNlZCwgem9uZXMgfSA9IGNoYXJ0RGF0YVxuXG4gIGNvbnN0IF9wcm9wcyA9IGNoYXJ0RGF0YS5wcm9wZXJ0aWVzXG4gIGNvbnN0IHByb3BlcnRpZXMgPSBfcHJvcHMuZmlsdGVyKHggPT4gISF4KVxuXG4gIGxldCBtYXhMaW5lUG9pbnRzID0gODBcblxuICAvLyBpZih6b25lcy5sZW5ndGggPiAxMCkgbWF4TGluZVBvaW50cyA9IDYwXG5cbiAgLy8gaWYoem9uZXMubGVuZ3RoID4gNTApIG1heExpbmVQb2ludHMgPSAzMFxuXG4gIC8vIGlmKHpvbmVzLmxlbmd0aCA+IDEwMCkgbWF4TGluZVBvaW50cyA9IDEwXG4gIFxuICBjb25zdCBsYXRlc3QgPSBidWZmZXIuYWN0aXZlW2J1ZmZlci5hY3RpdmUubGVuZ3RoIC0gMV1cbiAgbGV0IHhSYW5nZSA9IHNjYWxlICYmIHNjYWxlLnggPyBwYXJzZUludChzY2FsZS54KSA6IDEwXG5cbiAgaWYoaXNOYU4oeFJhbmdlKSkgeFJhbmdlID0gMTBcblxuICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIDEwMDBcbiAgbGV0IHhNYXggPSBwYXVzZWQgPyBsYXRlc3QgPyBsYXRlc3QudGltZSA6IG5vdyA6IG5vd1xuICBsZXQgeE1pbiA9IHhNYXggLSB4UmFuZ2UgKiAxMDAwXG4gIGxldCByZW5kZXJMaW1pdCA9IHhNaW4gLSAyMDAwXG4gIGxldCBkWCA9IHhNYXggLSB4TWluXG5cbiAgLy8gbGV0IHNhbXBsZSA9IGJ1ZmZlci5hY3RpdmUuZmlsdGVyKHggPT4geC50aW1lID4gcmVuZGVyTGltaXQpXG5cbiAgbGV0IHNhbXBsZSA9IFtdXG5cbiAgZm9yIChsZXQgaSA9IGJ1ZmZlci5hY3RpdmUubGVuZ3RoOyBpID49IDA7IGktLSkge1xuICAgIGNvbnN0IGZyYW1lID0gYnVmZmVyLmFjdGl2ZVtpXVxuICAgIC8vIGNvbnNvbGUubG9nKGZyYW1lICYmIGZyYW1lLnRpbWUsIHJlbmRlckxpbWl0KVxuICAgIGlmIChmcmFtZSkge1xuICAgICAgaWYgKGZyYW1lLnRpbWUgPj0gcmVuZGVyTGltaXQpIHtcbiAgICAgICAgc2FtcGxlLnVuc2hpZnQoZnJhbWUpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHhTY2FsZSA9IGNhbnZhcy53aWR0aCAvICh4TWF4IC0geE1pbilcblxuICBsZXQgbnVtSW50dmxzID0gMFxuICBsZXQgdG90YWxJbnR2bCA9IDBcblxuICAvLyBzYW1wbGUgNTAgZnJhbWVzIHRvIGdldCBhdmVyYWdlIGludGVydmFsIChtaXRpZ2F0ZSBlZmZlY3Qgb2YgbGF0ZW5jeSlcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCA1MDsgaSsrKSB7XG4gICAgbGV0IGEgPSBzYW1wbGVbaV1cbiAgICBsZXQgYiA9IHNhbXBsZVtpICsgMV1cbiAgICBpZiAoYSAmJiBiKSB7XG4gICAgICBjb25zdCBpbnR2bCA9IGIudGltZSAtIGEudGltZVxuICAgICAgbnVtSW50dmxzKytcbiAgICAgIHRvdGFsSW50dmwgKz0gaW50dmxcbiAgICB9XG4gIH1cblxuICAvLyBhdmVyYWdlIHNhbXBsZXMgYWJvdmUgdG8gZGV0ZXJtaW5lIGludGVydmFsIGJldHdlZW4gcGxvdCBwb2ludHMgKGRhdGEgcmF0ZSlcbiAgY29uc3QgaW50dmwgPSB0b3RhbEludHZsIC8gbnVtSW50dmxzXG5cbiAgLy8gZGV0ZXJtaW5lIHdoaWNoIHBvaW50cyBzaG91bGQgYmUgZmlsdGVyZWQgYmFzZWQgb24gbWF4IHBvaW50cyBwZXIgbGluZVxuICBjb25zdCBtaW5NU0ludGVydmFsID0gZFggLyBtYXhMaW5lUG9pbnRzXG5cbiAgbGV0IHJlbmRlcmVkID0gW11cblxuICAvLyBmaWx0ZXIgZGF0YSBwb2ludHMgdG8gZXhjbHVkZSBvbmVzIGluIHRoZSBleGNsdWRlZCB0aW1lIGludGVydmFsc1xuICBmb3IobGV0IGkgPSAwOyBpIDwgc2FtcGxlLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYoaSA9PSAwIHx8ICFyZW5kZXJlZC5sZW5ndGggfHwgaSA9PSBzYW1wbGUubGVuZ3RoIC0gMSkge1xuICAgICAgcmVuZGVyZWQucHVzaChzYW1wbGVbaV0pXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICgoc2FtcGxlW2ldLnRpbWUgLSAxNjE0Nzk5MTYwMDAwKSAlICBtaW5NU0ludGVydmFsIDwgaW50dmwpIHtcbiAgICAgICAgcmVuZGVyZWQucHVzaChzYW1wbGVbaV0pXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gcmVuZGVyZWQucmV2ZXJzZSgpXG5cbiAgbGV0IGxpbmVzID0ge31cbiAgbGV0IG1heCA9IHt9XG4gIGxldCBtaW4gPSB7fVxuICBsZXQgYXV0b1NjYWxlID0ge31cblxuICBmb3IgKGxldCBwcm9wIG9mIHByb3BlcnRpZXMpIHtcbiAgICBsaW5lc1twcm9wXSA9IFtdXG4gICAgbWF4W3Byb3BdID0gMFxuICAgIG1pbltwcm9wXSA9IDk5OTk5OTk5OTk5OTk5XG4gIH1cblxuXG4gIGZvcihsZXQgaSA9IDA7IGkgPCByZW5kZXJlZC5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGZyYW1lID0gcmVuZGVyZWRbaV1cbiAgICBcbiAgICBjb25zdCB4ID0gKGZyYW1lLnRpbWUgLSB4TWluKSAqIHhTY2FsZVxuXG4gICAgZm9yIChsZXQgeiBvZiB6b25lcykge1xuICAgICAgY29uc3QgcG9pbnQgPSBmcmFtZS5kYXRhW3ogLSAxXVxuXG4gICAgICBmb3IgKGxldCBwcm9wIG9mIHByb3BlcnRpZXMpIHtcbiAgICAgICAgaWYgKCFsaW5lc1twcm9wXVt6IC0gMV0pIGxpbmVzW3Byb3BdW3ogLSAxXSA9IFtdXG4gICAgICAgIGxldCB5ID0gcG9pbnRbcHJvcF1cbiAgICAgICAgaWYgKHByb3AgPT0gJ2RldmlhdGlvbicpIHtcbiAgICAgICAgICBjb25zdCBzZXR0aW5ncyA9IGdldFNldHRpbmdzKHBvaW50KVxuICAgICAgICAgIGlmICghc2V0dGluZ3Mub24pIHtcbiAgICAgICAgICAgIHkgPSAwXG4gICAgICAgICAgfSBlbHNlIGlmIChzZXR0aW5ncy5tYW51YWwpIHtcbiAgICAgICAgICAgIHkgPSBwb2ludC5tYW51YWxfc3AgLSBwb2ludC5hY3R1YWxfcGVyY2VudFxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB5ID0gcG9pbnQudGVtcF9zcCAtIHBvaW50LmFjdHVhbF90ZW1wXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxpbmVzW3Byb3BdW3ogLSAxXS5wdXNoKHsgeCwgeSB9KVxuICAgICAgICBpZiAoeSA+IG1heFtwcm9wXSkgbWF4W3Byb3BdID0geVxuICAgICAgICBpZiAoeSA8IG1pbltwcm9wXSkgbWluW3Byb3BdID0geVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvcihsZXQgcHJvcCBvZiBwcm9wZXJ0aWVzKSB7XG4gICAgaWYoIW5lZ2F0aXZlcy5pbmNsdWRlcyhwcm9wKSkge1xuICAgICAgbWluW3Byb3BdID0gTWF0aC5tYXgobWluW3Byb3BdLCAxKVxuICAgIH1cbiAgICAvLyBpZiAobWF4W3Byb3BdIDwgbWluW3Byb3BdICsgMTApIHtcbiAgICAvLyAgIG1heFtwcm9wXSA9IG1pbltwcm9wXSArIDEwXG4gICAgLy8gfVxuICAgIGNvbnN0IHIgPSBtYXhbcHJvcF0gLSBtaW5bcHJvcF1cblxuICAgIC8vIGVuc3VyZSByb3VuZCBudW1iZXJzIGFyZSB1c2VkIGZvciB0aGUgc2NhbGVcbiAgICBjb25zdCBldmVuID0gaSA9PiB7XG4gICAgICBtaW5bcHJvcF0gPSAtaSArIGkgKiBNYXRoLmNlaWwobWluW3Byb3BdIC8gaSlcbiAgICAgIG1heFtwcm9wXSA9IGkgKyBpICogTWF0aC5mbG9vcihtYXhbcHJvcF0gLyBpKVxuICAgIH1cblxuICAgIGlmKHIgPD0gMTAwKSB7XG4gICAgICBldmVuKDIwKVxuICAgIH0gZWxzZSBpZiAociA8PSAxMDAwKSB7XG4gICAgICBldmVuKDIwMClcbiAgICB9IGVsc2UgaWYgKHIgPD0gMTAwMDApIHtcbiAgICAgIGV2ZW4oMjAwMClcbiAgICB9IGVsc2Uge1xuICAgICAgZXZlbigyMDAwMClcbiAgICB9XG4gICAgXG4gICAgYXV0b1NjYWxlW3Byb3BdID0gY2FudmFzLmhlaWdodCAvIChtYXhbcHJvcF0gLSBtaW5bcHJvcF0pXG4gIH1cblxuXG4gIC8vIHNpbXBsaWZpZWQgbGluZXMgZm9yIHJlbmRlcmluZ1xuICBsZXQgcmVuZGVyZWRMaW5lcyA9IHt9XG5cbiAgLy8gdHJhY2sgYWxsIHJlbmRlcmVkIHZhbHVlcyBwZXIgcHJvcGVydHlcbiAgbGV0IHlWYWx1ZXMgPSB7fVxuXG4gIGxldCB0b3RhbFBvaW50cyA9IDBcblxuXG4gIC8vIGxvb3AgdGhyb3VnaCBwb2ludHMgYW5kIGRldGVybWluZSB3aGljaCBvbmVzIGFyZSBjcml0aWNhbCB0byBnZW9tZXRyeVxuICBmb3IobGV0IHByb3Agb2YgcHJvcGVydGllcykge1xuICAgIHJlbmRlcmVkTGluZXNbcHJvcF0gPSBbXVxuICAgIHlWYWx1ZXNbcHJvcF0gPSB7XG4gICAgICB0b3RhbDogMCxcbiAgICAgIHRvdGFsUG9pbnRzOiAwXG4gICAgfVxuXG4gICAgZm9yKGxldCBpID0gMDsgaSA8IGxpbmVzW3Byb3BdLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZihsaW5lc1twcm9wXVtpXSkge1xuICAgICAgICByZW5kZXJlZExpbmVzW3Byb3BdW2ldID0gW11cblxuICAgICAgICBmb3IgKGxldCBwID0gMDsgcCA8IGxpbmVzW3Byb3BdW2ldLmxlbmd0aDsgcCsrKSB7XG4gICAgICAgICAgbGV0IHBvaW50ID0gbGluZXNbcHJvcF1baV1bcF1cbiAgICAgICAgICB5VmFsdWVzW3Byb3BdLnRvdGFsICs9IHBvaW50LnlcbiAgICAgICAgICB5VmFsdWVzW3Byb3BdLnRvdGFsUG9pbnRzICs9IDFcbiAgICAgICAgICBwb2ludC55ID0gcGFyc2VJbnQoY2FudmFzLmhlaWdodCAtIChwb2ludC55IC0gbWluW3Byb3BdKSAqIGF1dG9TY2FsZVtwcm9wXSlcbiAgICAgICAgICByZW5kZXJlZExpbmVzW3Byb3BdW2ldLnB1c2gocG9pbnQpXG4gICAgICAgICAgdG90YWxQb2ludHMrK1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY29uc3QgbGluZUNvbG9ycyA9IHtcbiAgICBbX3Byb3BzWzBdXTogY29sb3JzWzFdLFxuICAgIFtfcHJvcHNbMV1dOiBjb2xvcnNbMl0sXG4gICAgW19wcm9wc1syXV06IGNvbG9yc1szXSxcbiAgICBbX3Byb3BzWzNdXTogY29sb3JzWzRdXG4gIH1cblxuICAvLyBjbGVhciBjYW52YXMgZm9yIG5ldyBmcmFtZVxuICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodClcblxuICBsZXQgYXZnID0ge31cbiAgZm9yKGxldCBwcm9wIG9mIHByb3BlcnRpZXMpIHtcbiAgICBhdmdbcHJvcF0gPSB5VmFsdWVzW3Byb3BdLnRvdGFsIC8geVZhbHVlc1twcm9wXS50b3RhbFBvaW50c1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCByZW5kZXJlZExpbmVzW3Byb3BdLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZihyZW5kZXJlZExpbmVzW3Byb3BdW2ldKSB7XG4gICAgICAgIGNvbnN0IGxpbmUgPSByZW5kZXJlZExpbmVzW3Byb3BdW2ldXG4gICAgICAgIHNtb290aChjdHgsIGxpbmUsIGxpbmVDb2xvcnNbcHJvcF0sIDEpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbG9nU3RhdHMoeyB0b3RhbFBvaW50cywgbWF4LCBtaW4sIGF2ZyB9KVxufVxuXG5leHBvcnQgZGVmYXVsdCBkcmF3IiwiaW1wb3J0IHJlbmRlckxpbmUgZnJvbSAnLi9saW5lLXBsb3QnXG5pbXBvcnQgYnVmZmVyIGZyb20gJy4vYnVmZmVyJ1xuXG5jb25zb2xlLmxvZygnY2hhcnQgd29ya2VyIGludGlhbGl6ZWQnKVxuXG5jb25zdCByZW5kZXJlcnMgPSB7XG4gICdsaW5lJzogcmVuZGVyTGluZVxufVxuXG5sZXQgY2hhcnREYXRhID0ge1xuICBjYW52YXM6IG51bGwsXG4gIGN0eDogbnVsbCxcbiAgdHlwZTogJycsXG4gIHByb3BlcnRpZXM6IFtdLFxuICBzY2FsZToge1xuICAgIHg6IDEwLFxuICAgIHk6ICdhdXRvJ1xuICB9XG59XG5cbmxldCBwb3J0XG5cblxubGV0IHN0YXRzID0ge31cbmNvbnN0IGxvZ1N0YXRzID0gcyA9PiBzdGF0cyA9IHNcblxuXG5sZXQgcmVuZGVyVGltZXMgPSBbXVxuXG5sZXQgbGFzdCA9IDBcbmNvbnN0IGRyYXcgPSAoKSA9PiB7XG4gIGNvbnN0IHQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKVxuICBpZiAoY2hhcnREYXRhLmN0eCkge1xuICAgIGlmIChyZW5kZXJlcnNbY2hhcnREYXRhLnR5cGVdKSB7XG4gICAgICByZW5kZXJlcnNbY2hhcnREYXRhLnR5cGVdKGNoYXJ0RGF0YSwgbG9nU3RhdHMpXG4gICAgICByZW5kZXJUaW1lcy5wdXNoKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gbGFzdClcbiAgICB9XG4gIH1cbiAgbGFzdCA9IHRcbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGRyYXcpXG59XG5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZHJhdylcblxubGV0IGxhc3RCdWZmZXJcblxuY29uc3QgY29sbGVjdFN0YXRzID0gKCkgPT4ge1xuXG4gIGNvbnN0IHRvdGFsUmVuZGVyID0gcmVuZGVyVGltZXMucmVkdWNlKCh0LCB0b3RhbCkgPT4gdG90YWwgKyB0LCAwKVxuICBjb25zdCBhdmdSZW5kZXIgPSB0b3RhbFJlbmRlciAvIHJlbmRlclRpbWVzLmxlbmd0aFxuICBjb25zdCBmcmFtZXJhdGUgPSBNYXRoLnJvdW5kKDEwMDAgLyBhdmdSZW5kZXIpXG4gIHJlbmRlclRpbWVzID0gW11cblxuICBwb3N0TWVzc2FnZSh7IC4uLnN0YXRzLCBmcmFtZXJhdGUgfSlcbn1cblxuc2V0SW50ZXJ2YWwoY29sbGVjdFN0YXRzLCAzMDApXG5cblxuXG5cbmNvbnN0IGluaXRpYWxpemUgPSBhc3luYyAoKSA9PiB7XG4gIHBvcnQub25tZXNzYWdlID0gZSA9PiB7XG4gICAgLy8gY29uc29sZS5sb2coZSlcbiAgICBjb25zdCB7IGRhdGEgfSA9IGUuZGF0YVxuICAgIGNvbnN0IHsgbXQgfSA9IGRhdGFcbiAgICBpZiAobXQgPT0gNikge1xuICAgICAgbGV0IHsgcmVjb3JkcyB9ID0gZGF0YVxuICAgICAgY29uc3QgdHMgPSBlLmRhdGEudHMuZ2V0VGltZSgpXG4gICAgICAvLyByZWNvcmRzID0gcmVjb3Jkcy5zbGljZSgwLCAxKVxuICAgICAgcmVjb3JkcyA9IHJlY29yZHMuY29uY2F0KHJlY29yZHMpLmNvbmNhdChyZWNvcmRzKVxuICAgICAgLy8gcmVjb3JkcyA9IHJlY29yZHMuc2xpY2UoMCwgbWF4Wm9uZXMpXG5cblxuICAgICAgLy8gdGVzdCB0d2VlbmluZ1xuICAgICAgaWYobGFzdEJ1ZmZlcikge1xuICAgICAgICAvLyBmb3IobGV0IHggb2YgWyAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEgXSkge1xuICAgICAgICBmb3IobGV0IHggb2YgWyAyLjQsIDQuOCwgNy4yLCA5LjYgXSkge1xuICAgICAgICAvLyBmb3IobGV0IHggb2YgWyA2IF0pIHtcbiAgICAgICAgICBsZXQgdHdlZW4gPSBbXVxuICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCByZWNvcmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBsYXN0ID0gbGFzdEJ1ZmZlcltpXVxuICAgICAgICAgICAgY29uc3QgY3VycmVudCA9IHJlY29yZHNbaV1cbiAgICAgICAgICAgIGlmKGxhc3QgJiYgY3VycmVudCkge1xuICAgICAgICAgICAgICBsZXQgdHdlZW5lZCA9IHsgLi4uY3VycmVudCB9XG4gICAgICAgICAgICAgIGZvciAobGV0IHByb3Agb2YgY2hhcnREYXRhLnByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhwcm9wKVxuICAgICAgICAgICAgICAgIGNvbnN0IGRlbHRhID0gKGN1cnJlbnRbcHJvcF0gLSBsYXN0W3Byb3BdKSAvIDEyXG4gICAgICAgICAgICAgICAgdHdlZW5lZFtwcm9wXSA9IGxhc3RbcHJvcF0gKyBkZWx0YSAqIHhcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB0d2Vlbi5wdXNoKHR3ZWVuZWQpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IG9mZnNldCA9IDUwMCAvIDEyICogeFxuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gYnVmZmVyLndyaXRlKHsgdHM6IHRzIC0gNTAwICsgb2Zmc2V0LCBkYXRhOiB0d2VlbiB9KSwgb2Zmc2V0KVxuICAgICAgICB9XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gYnVmZmVyLndyaXRlKHsgdHMsIGRhdGE6IHJlY29yZHMgfSksIDUwMClcbiAgICAgIH1cbiAgICAgIGxhc3RCdWZmZXIgPSByZWNvcmRzXG4gICAgfVxuICB9XG5cbiAgcG9ydC5wb3N0TWVzc2FnZSh7XG4gICAgY29tbWFuZDogJ2Nvbm5lY3QnLFxuICAgIGNoYW5uZWxzOiBbICd0Y3pvbmUnIF1cbiAgfSlcbn1cblxuXG5vbm1lc3NhZ2UgPSBlID0+IHtcbiAgaWYgKGUuZGF0YS53c1BvcnQpIHtcbiAgICBwb3J0ID0gZS5kYXRhLndzUG9ydFxuICAgIGluaXRpYWxpemUoKVxuICB9IGVsc2UgaWYgKGUuZGF0YSA9PSAnY2xvc2UnKSB7XG4gICAgcG9ydC5wb3N0TWVzc2FnZSh7IGNvbW1hbmQ6ICdjbG9zZScgfSlcbiAgfSBlbHNlIHtcbiAgICBjaGFydERhdGEgPSB7IC4uLmNoYXJ0RGF0YSwgLi4uZS5kYXRhIH1cbiAgICAvLyBjb25zb2xlLmxvZygndXBkYXRpbmcgZGF0YScsIGNoYXJ0RGF0YSlcbiAgICBpZiAoY2hhcnREYXRhLnBhdXNlZCkge1xuICAgICAgYnVmZmVyLnBhdXNlKClcbiAgICB9IGVsc2Uge1xuICAgICAgYnVmZmVyLnBsYXkoKVxuICAgIH1cbiAgICBpZiAoZS5kYXRhLmNhbnZhcykge1xuICAgICAgY2hhcnREYXRhLmN0eCA9IGNoYXJ0RGF0YS5jYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpXG4gICAgfVxuICB9XG59Il0sIm5hbWVzIjpbInJlbmRlckxpbmUiLCJkcmF3Il0sIm1hcHBpbmdzIjoiOzs7RUFBQSxJQUFJLE1BQU0sR0FBRztFQUNiLEVBQUUsT0FBTyxFQUFFLEVBQUU7RUFDYixFQUFFLE1BQU0sRUFBRSxFQUFFO0VBQ1osRUFBRSxNQUFNLEVBQUUsS0FBSztFQUNmLEVBQUM7QUFHRDtFQUNBLE1BQU0sQ0FBQyxLQUFLLEdBQUcsU0FBUyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRTtFQUN0QyxFQUFFLE1BQU0sSUFBSSxHQUFHLElBQUksSUFBSSxDQUFD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QVc7RUFDWCxTQUFTO0VBQ1QsUUFBUSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBQztFQUN6QyxRQUFRLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBQztFQUN4QyxRQUFRLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBQztFQUN4QyxPQUFPO0VBQ1AsS0FBSztFQUNMLEdBQUc7QUFDSDtFQUNBLEVBQUUsSUFBSSxJQUFJLElBQUksSUFBSSxVQUFVLEVBQUU7RUFDOUIsSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRTtFQUNsQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUM7RUFDeEMsS0FBSztFQUNMO0VBQ0E7RUFDQTtFQUNBLElBQUksTUFBTSxDQUFDLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLEVBQUM7QUFDbkM7RUFDQTtFQUNBLElBQUksTUFBTSxJQUFJLEdBQUcsQ0FBQyxJQUFJO0VBQ3RCLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUM7RUFDbkQsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUM7RUFDbkQsTUFBSztBQUNMO0VBQ0EsSUFBSSxHQUFHLENB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
