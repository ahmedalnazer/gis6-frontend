(function () {
  'use strict';

  let buffer = {
    entries: [],
    active: [],
    paused: false
  };

  buffer.write = function(data) {
    const date = new Date();
    buffer.entries.push({
      data,
      date,
      time: date.getTime(),
    });
    buffer.entries = buffer.entries.slice(-7500);
    if(!buffer.paused) {
      buffer.active = [ ...buffer.entries ];
    }
    // console.log(buffer.entries.length)
  };
  buffer.play = () => buffer.paused = false;
  buffer.pause = () => buffer.paused = true;

  function smooth(ctx, points, color, width) {
    ctx.strokeStyle = color;
    ctx.lineWidth = width;
    // ctx.strokeRect(20, 20, 150, 100)

    ctx.beginPath();
    if (points == undefined || points.length == 0) {
      return true
    }
    if (points.length == 1) {
      ctx.moveTo(points[0].x, points[0].y);
      ctx.lineTo(points[0].x, points[0].y);
      return true
    }
    if (points.length == 2) {
      ctx.moveTo(points[0].x, points[0].y);
      ctx.lineTo(points[1].x, points[1].y);
      return true
    }
    ctx.moveTo(points[0].x, points[0].y);
    for (var i = 1; i < points.length - 2; i++) {
      // ctx.lineTo(points[i].x, points[i].y)
      var xc = (points[i].x + points[i + 1].x) / 2;
      var yc = (points[i].y + points[i + 1].y) / 2;
      // ctx.lineTo(points[i].x, points[i].y)
      ctx.quadraticCurveTo(points[i].x, points[i].y, xc, yc);
    }
    ctx.quadraticCurveTo(points[i].x, points[i].y, points[i + 1].x, points[i + 1].y);
    ctx.stroke();
  }

  let chartData = {};

  const draw = () => {
    const { canvas, ctx, scale, paused, properties } = chartData;

    ctx.clearRect(0, 0, canvas.width, canvas.height);
    // ctx.fillStyle = '#ffffff'
    // ctx.fillRect(0, 0, canvas.width, canvas.height)
    
    const latest = buffer.active[buffer.active.length - 1];
    let xRange = scale && scale.x ? parseInt(scale.x) : 10;

    if(isNaN(xRange)) xRange = 10;

    const now = new Date().getTime();
    let xMax = paused ? latest ? latest.time : now : now;
    let xMin = xMax - xRange * 1000;
    let renderLimit = xMin - 1000;

    let sample = buffer.active.filter(x => x.time > renderLimit);

    const xScale = canvas.width / (xMax - xMin);

    // console.log(buffer.entries.length)

    sample[0];
    let rendered = [ ...sample ];

    // if(lastSample) rendered.push(lastSample)

    // for(let i = 0; i < sample.length; i++) {
    //   const s = sample[i]
    //   if(s.time > lastSample.time + intvl || i == sample.length - 1) {
    //     lastSample = s
    //     rendered.push(lastSample)
    //   }
    // }

    let lines = {};
    let max = {};
    let min = {};
    let autoScale = {};

    for (let prop of properties) {
      lines[prop] = [];
      max[prop] = 0;
      min[prop] = 99999999999999;
    }


    for(let i = 0; i < rendered.length; i++) {
      const frame = rendered[i];
      
      const x = parseInt((frame.time - xMin) * xScale);

      if(x <= canvas.width) {
        for (let p = 0; p < frame.data.length; p++) {
          const point = frame.data[p];

          for(let prop of properties) {
            if (!lines[prop][p]) lines[prop][p] = [];
            let y = point[prop];
            lines[prop][p].push({ x, y });
            if(y > max[prop]) max[prop] = y;
            if(y < min[prop]) min[prop] = y;
          }
        }
      }
    }

    for(let prop of properties) {
      autoScale[prop] = canvas.height / (max[prop] - min[prop]);
    }


    // simplified lines for rendering
    let renderedLines = {};


    // loop through points and determine which ones are critical to geometry
    for(let prop of properties) {
      renderedLines[prop] = [];

      for(let i = 0; i < lines[prop].length; i++) {
        renderedLines[prop][i] = [];

        // add point to rendered line, adjust y to scale
        const pushPoint = p => {
          // console.log(p)
          p.y = parseInt(canvas.height - (p.y - min[prop]) * autoScale[prop]);
          p.x;
          renderedLines[prop][i].push(p);
        };

        for (let p = 0; p < lines[prop][i].length; p++) {
          let point = lines[prop][i][p];
          pushPoint(point);
          continue
        }
      }
    }

    // console.log(temps[0])

    const colors = {
      actual_temp: "#dd3300",
      actual_current: "#0033aa",
      actual_percent: "#33aabb"
    };

    for(let prop of properties) {
      for(let i = 0; i < renderedLines[prop].length; i++) {
        // console.log(renderedLines[prop][i].length)
        smooth(ctx, renderedLines[prop][i], colors[prop], 2);
      }
    }
  };

  function renderLine(data) {
    chartData = data;
    draw();
  }

  console.log('chart worker intialized');

  const renderers = {
    'line': renderLine
  };

  let chartData$1 = {
    canvas: null,
    ctx: null,
    type: '',
    properties: [],
    scale: {
      x: 10,
      y: 'auto'
    }
  };

  let port;

  onmessage = e => {
    if(e.data.wsPort) {
      port = e.data.wsPort;
      initialize();
    } else if (e.data == 'close') {
      port.postMessage({ command: 'close' });
    } else {
      chartData$1 = { ...chartData$1, ...e.data };
      // console.log('updating data', chartData)
      if(chartData$1.paused) {
        buffer.pause();
      } else {
        buffer.play();
      }
      if(e.data.canvas) {
        chartData$1.ctx = chartData$1.canvas.getContext("2d");
      }
    }
  };



  const draw$1 = () => {
    if (chartData$1.ctx) {
      if (renderers[chartData$1.type]) {
        renderers[chartData$1.type](chartData$1);
      }
    }
    requestAnimationFrame(draw$1);
  };
  requestAnimationFrame(draw$1);

  let lastBuffer;

  const initialize = async () => {
    port.onmessage = e => {

      // console.log(e)
      const { data } = e;
      const { mt } = data;
      if (mt == 6) {
        let { records } = data;
        // records = records.slice(0, 1)
        // records = records.concat(records).concat(records)
        // console.log(records.length)
        if(lastBuffer) {
          for(let x of [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ]) {
            for(let i = 0; i < records.length; i++) {
              const last = lastBuffer[i];
              const current = records[i];
              let tweened = { ...current };
              for(let prop of chartData$1.properties) {
                // console.log(prop)
                const delta = (current[prop] - last[prop]) / 12;
                tweened[prop] = last[prop] + delta * x;
              }
            }
            // setTimeout(() => buffer.write(tween), 500 / 12 * x)
          }
          setTimeout(() => buffer.write(records), 500);
          // buffer.write(lastBuffer)
          
        }
        lastBuffer = records;
      }
    };

    port.postMessage({
      command: 'connect',
      channels: [ 'tczone' ]
    });
  };

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
