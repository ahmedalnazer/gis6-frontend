'use strict' // code generated by pbf v3.2.1

var mtype = self.mtype = {
  "mt_unknown": {
    "value": 0,
    "options": {}
  },
  "mt_iomdata": {
    "value": 1,
    "options": {}
  },
  "mt_minmax": {
    "value": 2,
    "options": {}
  },
  "mt_sysinfo": {
    "value": 3,
    "options": {}
  },
  "mt_tcdata": {
    "value": 4,
    "options": {}
  },
  "mt_vgcdata": {
    "value": 5,
    "options": {}
  }
}

// unknown_msg ========================================

export let unknown_msg = self.unknown_msg = {}

unknown_msg.read = function (pbf, end) {
  return pbf.readFields(unknown_msg._readField, { mt: 0 }, end)
}
unknown_msg._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.mt = pbf.readVarint()
}
unknown_msg.write = function (obj, pbf) {
  if (obj.mt) pbf.writeVarintField(1, obj.mt)
}

// iomdata ========================================

var iomdata = self.iomdata = {}

iomdata.read = function (pbf, end) {
  return pbf.readFields(iomdata._readField, { mt: 0, total_d_inputs: 0, total_d_outputs: 0, total_a_inputs: 0, total_a_outputs: 0, d_inputs: null, d_outputs: null, a_inputs: null, a_outputs: null }, end)
}
iomdata._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.mt = pbf.readVarint()
  else if (tag === 2) obj.total_d_inputs = pbf.readVarint()
  else if (tag === 3) obj.total_d_outputs = pbf.readVarint()
  else if (tag === 4) obj.total_a_inputs = pbf.readVarint()
  else if (tag === 5) obj.total_a_outputs = pbf.readVarint()
  else if (tag === 6) obj.d_inputs = pbf.readBytes()
  else if (tag === 7) obj.d_outputs = pbf.readBytes()
  else if (tag === 8) obj.a_inputs = pbf.readBytes()
  else if (tag === 9) obj.a_outputs = pbf.readBytes()
}
iomdata.write = function (obj, pbf) {
  if (obj.mt) pbf.writeVarintField(1, obj.mt)
  if (obj.total_d_inputs) pbf.writeVarintField(2, obj.total_d_inputs)
  if (obj.total_d_outputs) pbf.writeVarintField(3, obj.total_d_outputs)
  if (obj.total_a_inputs) pbf.writeVarintField(4, obj.total_a_inputs)
  if (obj.total_a_outputs) pbf.writeVarintField(5, obj.total_a_outputs)
  if (obj.d_inputs) pbf.writeBytesField(6, obj.d_inputs)
  if (obj.d_outputs) pbf.writeBytesField(7, obj.d_outputs)
  if (obj.a_inputs) pbf.writeBytesField(8, obj.a_inputs)
  if (obj.a_outputs) pbf.writeBytesField(9, obj.a_outputs)
}

// minmax ========================================

export const minmax = self.minmax = {}

minmax.read = function (pbf, end) {
  return pbf.readFields(minmax._readField, { mt: 0, min_zone: 0, max_zone: 0, min: 0, max: 0 }, end)
}
minmax._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.mt = pbf.readVarint()
  else if (tag === 2) obj.min_zone = pbf.readVarint()
  else if (tag === 3) obj.max_zone = pbf.readVarint()
  else if (tag === 4) obj.min = pbf.readVarint(true)
  else if (tag === 5) obj.max = pbf.readVarint(true)
}
minmax.write = function (obj, pbf) {
  if (obj.mt) pbf.writeVarintField(1, obj.mt)
  if (obj.min_zone) pbf.writeVarintField(2, obj.min_zone)
  if (obj.max_zone) pbf.writeVarintField(3, obj.max_zone)
  if (obj.min) pbf.writeVarintField(4, obj.min)
  if (obj.max) pbf.writeVarintField(5, obj.max)
}

// sysinfo ========================================

var sysinfo = self.sysinfo = {}

sysinfo.read = function (pbf, end) {
  return pbf.readFields(sysinfo._readField, { mt: 0, state: 0, sys_message: null, order_status: 0, order_id: 0, target: 0, inj_cycle: 0, cycle_id: 0, good_parts: 0 }, end)
}
sysinfo._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.mt = pbf.readVarint()
  else if (tag === 2) obj.state = pbf.readVarint()
  else if (tag === 3) obj.sys_message = pbf.readBytes()
  else if (tag === 4) obj.order_status = pbf.readVarint()
  else if (tag === 5) obj.order_id = pbf.readVarint(true)
  else if (tag === 6) obj.target = pbf.readVarint(true)
  else if (tag === 7) obj.inj_cycle = pbf.readVarint(true)
  else if (tag === 8) obj.cycle_id = pbf.readVarint(true)
  else if (tag === 9) obj.good_parts = pbf.readVarint(true)
}
sysinfo.write = function (obj, pbf) {
  if (obj.mt) pbf.writeVarintField(1, obj.mt)
  if (obj.state) pbf.writeVarintField(2, obj.state)
  if (obj.sys_message) pbf.writeBytesField(3, obj.sys_message)
  if (obj.order_status) pbf.writeVarintField(4, obj.order_status)
  if (obj.order_id) pbf.writeVarintField(5, obj.order_id)
  if (obj.target) pbf.writeVarintField(6, obj.target)
  if (obj.inj_cycle) pbf.writeVarintField(7, obj.inj_cycle)
  if (obj.cycle_id) pbf.writeVarintField(8, obj.cycle_id)
  if (obj.good_parts) pbf.writeVarintField(9, obj.good_parts)
}

// tc_record ========================================

var tc_record = self.tc_record = {}

tc_record.read = function (pbf, end) {
  return pbf.readFields(tc_record._readField, { temp: 0, voltage: 0 }, end)
}
tc_record._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.temp = pbf.readVarint(true)
  else if (tag === 2) obj.voltage = pbf.readVarint(true)
}
tc_record.write = function (obj, pbf) {
  if (obj.temp) pbf.writeVarintField(1, obj.temp)
  if (obj.voltage) pbf.writeVarintField(2, obj.voltage)
}

// tcdata ========================================

export const tcdata = self.tcdata = {}

tcdata.read = function (pbf, end) {
  return pbf.readFields(tcdata._readField, { mt: 0, slice_id: 0, zones: 0, records: [] }, end)
}
tcdata._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.mt = pbf.readVarint()
  else if (tag === 2) obj.slice_id = pbf.readVarint()
  else if (tag === 3) obj.zones = pbf.readVarint()
  else if (tag === 4) obj.records.push(tc_record.read(pbf, pbf.readVarint() + pbf.pos))
}
tcdata.write = function (obj, pbf) {
  if (obj.mt) pbf.writeVarintField(1, obj.mt)
  if (obj.slice_id) pbf.writeVarintField(2, obj.slice_id)
  if (obj.zones) pbf.writeVarintField(3, obj.zones)
  if (obj.records) for (var i = 0; i < obj.records.length; i++) pbf.writeMessage(4, tc_record.write, obj.records[i])
}

// vgc_record ========================================

var vgc_record = self.vgc_record = {}

vgc_record.read = function (pbf, end) {
  return pbf.readFields(vgc_record._readField, { pressure: 0, displacement: 0 }, end)
}
vgc_record._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.pressure = pbf.readVarint(true)
  else if (tag === 2) obj.displacement = pbf.readVarint(true)
}
vgc_record.write = function (obj, pbf) {
  if (obj.pressure) pbf.writeVarintField(1, obj.pressure)
  if (obj.displacement) pbf.writeVarintField(2, obj.displacement)
}

// vgcdata ========================================

var vgcdata = self.vgcdata = {}

vgcdata.read = function (pbf, end) {
  return pbf.readFields(vgcdata._readField, { mt: 0, slice_id: 0, zones: 0, records: [] }, end)
}
vgcdata._readField = function (tag, obj, pbf) {
  if (tag === 1) obj.mt = pbf.readVarint()
  else if (tag === 2) obj.slice_id = pbf.readVarint()
  else if (tag === 3) obj.zones = pbf.readVarint()
  else if (tag === 4) obj.records.push(vgc_record.read(pbf, pbf.readVarint() + pbf.pos))
}
vgcdata.write = function (obj, pbf) {
  if (obj.mt) pbf.writeVarintField(1, obj.mt)
  if (obj.slice_id) pbf.writeVarintField(2, obj.slice_id)
  if (obj.zones) pbf.writeVarintField(3, obj.zones)
  if (obj.records) for (var i = 0; i < obj.records.length; i++) pbf.writeMessage(4, vgc_record.write, obj.records[i])
}
